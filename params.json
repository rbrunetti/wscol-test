{"name":"WSCoL-test","tagline":"","body":"# WSCoL Language\r\n<a name=\"top\"></a>\r\nWSCoL (Web Service Constraint Language) is a special-purpose assertion DSL for the expression of monitoring directives and constraint.\r\n\r\nWSCoL concentrates on both functional and non-functional properties, and is suitable to express general dependability properties such as safety, integrity, availability and reliability.\r\n\r\nWSCoL could work in many other contexts: manipulation of data retrieved from a Rest service …\r\n\r\n<a name=\"grammar\"></a>\r\n## Grammar\r\nThe syntax is specified using Extended Backus-Naur Form (EBNF): \r\n```\r\nModel:\r\n    Declaration* Assertions ';'\r\n    \r\nDeclaration:\r\n    'let' Variable 'in' Assertion ';'\r\n    \r\nAssertions:\r\n    PrimaryAssertions (('&&' | '||') PrimaryAssertions )*\r\n    \r\nPrimaryAssertions:\r\n    '(' Assertions ')' | '!(' Assertions ')' | Assertion\r\n    \r\nAssertion:\r\n    Expression Rop Expression;\r\n    \r\nExpression:\r\n    Step+ ('.' Function)* | NumericExpression | AssertionQuantified | Array | Boolean\r\n    \r\nStep:\r\n    '/' ID ('[' Predicate ']')? | Variable\r\n\r\nPredicate:\r\n    ID Rop (STRING|NUMBER|Variable) | NUMBER | Variable\r\n\r\nFunction:\r\n    ID '(' (Values)? ')'\r\n\r\nAssertionQuantified:\r\n    Quantifier '(' Variable 'in' Variable, Assertions ')'\r\n\r\nVariable:\r\n    '$' ID\r\n\r\nRop:\r\n    '==' | '!=' | '>' | '>=' | '<' | '<='\r\n```\r\n\r\nProductions with first capital letter are refers to rules, uppercase productions are terminals.\r\n\r\n<a name=\"features\"></a>\r\n## Features\r\nWSCoL structure present two main part: declaration part and assertions part.\r\n\r\n_Declarations part_ has the purpose to let the user define variables that could be  used later for making assertions. The use of variables is not mandatory for the grammar, but is useful for simpler and clearer usage of the language.\r\n\r\n_Assertions part_ of the grammar contains the set of constraints and values you want to check and keep controlled. It's the kernel of the language.<br/>\r\nAssertions are composed by using logical operators: NOT (`!`), AND (`&&`), OR (`||`). These have the usual priority: NOT > AND > OR. With brackets for change the priority, depending on the user's needs.<br/>\r\nEach [_assertion_](#assertion) consist of a comparison, using various operators, between two expressions.\r\n\r\n<a name=\"declaration\"></a>\r\n### Declaration\r\nAllows to assign a value to a variable.<br/>\r\nSyntax:\r\n> let _$var_ = _value_ ;\r\n\r\nWhere:\r\n\r\n* __let__: is the keyword for starting a declaration\r\n* __$var__: is the name of the assigned variable\r\n* __value__: is the value to store\r\n* '__;__' : is the termination character\r\n\r\nThe _value_ could be directly declared when it's a constant (a number, a string, a Boolean or an array - see [field types](#field_types)), or it could be the result of an [assertion](#assertion) (the value corresponding to a certain [navigation path](#nav_query) or the result of an expression or a [quantified assertion](#quant_aggr_assertion)).<br/>\r\nHere's some examples:\r\n\r\n```\r\nlet $number = 10;\r\nlet $string = \"Hello World!\";\r\nlet $array = [1, 2, 3];\r\nlet $assertion = /path/to/the/value;\r\nlet $assertion_exp = 2 * ($number - 1); // multiply 2 and (10 - 1)\r\nlet $quantified_assertion = numOf($elem in $array, $elem > 1); // result is 2\r\n```\r\n\r\n<a name=\"assertion\"></a>\r\n### Assertion\r\nWith the term _assertion_ we intend true-false statement achieved with a comparison between expressions.\r\nThe comparison can be made with the use of operations like equal (`==`), unequal (`!=`), greater (`>`), lower (`<`), greater or equal (`>=`) and lower or equal (`<=`).<br/>\r\nEach operation as sense with respect to the expressions type:\r\n\r\nOperation |   SDO    |   Array  |  Number  |  String  |  Boolean\r\n:--------:|:--------:|:--------:|:--------:|:--------:|:--------:\r\n`==`      | &#10003; | &#10003; | &#10003; | &#10003; | implicit*\r\n`!=`      | &#10003; | &#10003; | &#10003; | &#10003; | implicit*\r\n`>`       |          |       \t| &#10003; |          | \r\n`>=`      |     \t |       \t| &#10003; |          |\r\n`<`       |     \t |       \t| &#10003; |          |\r\n`<=`      |     \t |       \t| &#10003; |          |\r\n\r\n(*) in the case of a comparison between Boolean expressions, the operation and _true_ result becomes implicit and must be removed (for example the right one is `$a.contains(\"string\")` and not `$a.contains(\"string\") == true`). If the assertion checks _false_ the expression is negated (`!($a.contains(\"string\"))`).\r\n\r\nThe members of an assertion can be:\r\n\r\n* query (see [Navigation and query](#nav_query)\r\n* constant (numeric or string)\r\n* array\r\n* quantified assertion (see [Quantified Assertion & Aggregated Functions](#quant_aggr_assertion)\r\n* numeric expression (see [Numeric Expression](#num_expr))\r\n* variable\r\n\r\n<a name=\"quant_aggr_assertion\"></a>\r\n#### Quantified Assertion & Aggregated Functions\r\nThese are assertions that iterate over a finite set of values and check every contained element with respect to the conditions.\r\n\r\nThe objective is to give the possibility to express constraints using universal and existential quantifier or aggregated functions. The statement is in the following form:\r\n> _quantifier_ (_alias_ in _var_, _conditions_)\r\n\r\nWhere:\r\n\r\n* __quantifier__: the name of the used quantifier/function (see the table below for details)\r\n* __alias__: a temp variable that will be used as parameter in the upcoming conditions\r\n* __var__: the variable to which the iteration is applied, it defines the range of values that the _alias_ can assume (_var_ must be an array)\r\n* __conditions__: the set of assertions to test at every iteration\r\n\r\nList of functions and their characteristics\r\n\r\n  Name   | Returns |   Description\r\n:-------:|:-------:|:---------------\r\n forall  | Boolean | True if, for every element, the conditions are respected\r\n exists  | Boolean | True if, for at least one element, the conditions are respected\r\n numOf   | Double  |  the number of elements that respects the conditions\r\n max     | Double  | Returns the maximum element that respects the conditions\r\n min     | Double  | Returns the minimum element that respects the conditions\r\n avg     | Double  | Returns the average of the elements that respects the conditions\r\n sum     | Double  | Returns the sum of elements that respects the conditions\r\n product | Double  | Returns the product of elements that respects the conditions\r\n\r\n<a name=\"num_expr\"></a>\r\n#### Numeric Expression\r\nUse and evaluate expressions, using the canonical operands: sum (+), subtraction (-), multiplication (*), division (/) and modulo (%). The priorities between these operators is exactly as they are listed before, and, as usual, precedence could be modified with brackets. Expressions can also be calculated using navigation path and variables, as long as they return numeric values.\r\n\r\n<a name=\"nav_query\"></a>\r\n### Navigation and query\r\nLet the user querying and retrieving values from an SDO using a notation inspired by <a href=\"http://www.w3.org/TR/xpath\" target=\"_blank\">XPath</a>.<br/>\r\nThe queries are build by _steps_ separated by a slash `/`, at each step the specified element is selected and the corresponding value is returned.<br/>\r\nAs in XPath, there are _predicates_ used to restrict the node-set by selecting only those nodes for which a specified condition is true; acceptable predicates enable the selection of a node by its value or by its position:\r\n```\r\n// select the 'step1' whose 'step2' is greater or equal than 1\r\nlet $a = /step1[step2 >= 1];\r\n\r\n// select the 'step1' whose 'step3' is equal to \"String\"\r\nlet $b = /step1[step3 == ”String”];\r\n\r\n// select the first of the 'step1' nodes\r\nlet $c = /step1[1];\r\n```\r\nThe form in the first two cases is\r\n> [ _node_ op _value_ ]\r\n\r\nWhere\r\n\r\n* __node__: the name of the node to test\r\n* __op__: the operation to apply (note that only `==` and `!=` has sense when _value_ is a String)\r\n* __value__: the value to compare, could be a String, a number or a _Variable_\r\n\r\n<a name=\"field_types\"></a>\r\n### Field Types\r\nThe data types used inside the language are\r\n\r\n* SDO\r\n* Array\r\n* String\r\n* Double\r\n* Boolean\r\n\r\nEach of them as associated it's own functions, they are going to explained with the corresponding data type.\r\n\r\n<a name=\"sdo\"></a>\r\n#### SDO\r\nService Data Objects use a data structure whose purpose is to facilitate communication.<br/> The structure is tree-based with a root node and use the briefly explained [traversal mechanisms](#nav_query) that allow client programs to navigate the elements.<br/>\r\nObjects are dynamic with a map-like structure allowing also the nesting of other SDO.\r\n\r\nThe application parse XML and JSON to SDO, and use it for elaboration.\r\n\r\nHere's the structure of a fictitious object:\r\n```\r\n{\r\n    elem1 = \"String\",\r\n    elem2 = 1,\r\n    elem3 = [\"A\", \"B\", \"C\"],\r\n    elem4 = true,\r\n    elem5 = {\r\n                sub-elem1 = \"String\",\r\n                sub-elem2 = {\r\n                                sub-sub-elem1 = 10\r\n                            },\r\n                sub-elem3 = [1, 2]\r\n            }\r\n}\r\n```\r\nThe `elem` elements are in the first level, then `elem5` (that is an SDO) has other sub-elements and so on...\r\n\r\n##### Functions\r\n* __contains(Object elem)__: returns _true_ if the object is contained (the research  is deep)\r\n* __get(int index)__: returns the value of the _index_-th node (the first has index = 1)\r\n* __get(String node)__: returns the value of the node with name _node_\r\n* __cardinality()__: returns the number of values contained\r\n\r\n<a name=\"array\"></a>\r\n#### Array\r\nThe classical kind of array, containing a finite number of elements.<br/>\r\nIt is defined writing the elements of it inside square brackets `[ ... ]`\r\n\r\n##### Functions\r\n* __contains(Object elem)__: returns _true_ if the object is contained\r\n* __get(int index)__: returns the _index_-th element\r\n* __cardinality()__: returns the length of the array\r\n\r\n<a name=\"string\"></a>\r\n#### String\r\nIs considered as string everything inside quotes `\"...\"`\r\n\r\n##### Functions\r\n* __uppercase()__: turns every character to uppercase\r\n* __lowecase()__: turns every character to lowercase\r\n* __length()__: returns the length of the string\r\n* __startsWith(String prefix)__: returns _true_ if the string starts with _prefix_\r\n* __endsWith(String suffix)__: returns _true_ if the string ends with _prefix_\r\n* __substring(int beginIndex, int endIndex)__: returns the substring from _beginIndex_ to _endIndex_\r\n* __replace(String target, String replacement)__: replace every occurrence of _target_ with _replacement_\r\n\r\n<a name=\"double\"></a>\r\n#### Double\r\nEvery number is parsed and used as a signed double\r\n\r\n##### Functions\r\n* __abs()__: apply _abs_ to the number\r\n\r\n<a name=\"comments\"></a>\r\n### Comments\r\nThere are two type of _comments_:\r\n\r\n* __Line Comments__ start with the sequence `//` and stop at the end of line\r\n* __General Comments__ start with the sequence `/*` and continue until character sequence `*/`, it could contain more than one line\r\n \r\nComments do not nest.\r\n\r\n<a name=\"keyword\"></a>\r\n### Keyword\r\nThe following keywords are reserved and may not be used as identifiers\r\n```\r\nlet       max       startsWith\r\nin        min       endsWith\r\nforall    sum       contains\r\nexists    avg\r\nnumOf     product\r\n```\r\n\r\n<a name=\"operators\"></a>\r\n### Operators\r\n The following character sequences represent operators, delimiters, and other special tokens:\r\n```\r\n==    +    &&    ,    (  )\r\n!=    -    ||    ;    [  ]\r\n>     *    !     .\r\n<     /\r\n>=    %\r\n<=\r\n=\r\n```\r\n<a name=\"examples\"></a>\r\n# Examples\r\nWSCoL is a very flexible language and for this reason it could be used in various contexts.<br/>\r\nIn the following sections you’ll find out some nice application.\r\n\r\n<a name=\"example_toy\"></a>\r\n## _Toy example: Book store_\r\nJust a little case to understand better about what we’re talking about.<br/>\r\nAt first you need to get the application jar, download it [here]().<br/>\r\nThe input file is the succeeding xml file, __*book.xml*__:\r\n```XML\r\n<inventory>\r\n    <name>InventoryABCD</name>\r\n    <book>\r\n        <year>2000</year>\r\n        <title>Snow Crash</title>\r\n        <authors>\r\n            <author>Neal Stephenson</author>\r\n        </authors>\r\n        <publisher>Spectra</publisher>\r\n        <isbn>0553380958</isbn>\r\n        <price>15</price>\r\n    </book>\r\n    <book>\r\n        <year>2005</year>\r\n        <title>Burning Tower</title>\r\n        <authors>\r\n            <author>Larry Niven</author>\r\n            <author>Jerry Pournelle</author>\r\n        </authors>\r\n        <publisher>Pocket</publisher>\r\n        <isbn>0743416910</isbn>\r\n        <price>6</price>\r\n    </book>\r\n    <book>\r\n        <year>1995</year>\r\n        <title>Zodiac</title>\r\n        <authors>\r\n            <author>Neal Stephenson</author>\r\n        </authors>\r\n        <publisher>Spectra</publisher>\r\n        <isbn></isbn>\r\n        <price>7.50</price>\r\n    </book>\r\n</inventory>\r\n```\r\nThe following assertions are based on this file.\r\n\r\n<a name=\"example_toy_1\"></a>\r\n### First Assertion\r\nNow we have to generate a wscol file with the assertions to verify.\r\nFor convenience just save __*assertions.wscol*__ in the same folder as the xml file and the application jar, then copy-and-paste the next assertion:\r\n```\r\n/inventory/book[1]/title == \"Snow Crash\";\r\n```\r\nLaunch the application from cli with the command\r\n```Shell\r\n$ java –jar WSCoL-App.jar assertion.wscol –xml book.xml\r\n```\r\n\r\nThe assertion says that the title of the first book (note the use of the predicate in square brackets) is equal to `“Snow Crash”` and, obviously, the result is _true_.<br/>\r\nThe expression returns a string and correctly compare it with the string on the right side that we have written.<br/>\r\nDue to the flexibility of WSCoL, the same assertion can be written in different manners:\r\n\r\n```\r\n/* Alternative 1 */\r\nlet $a = /inventory/book[1]/title;\r\nlet $b = “Snow Crash”;\r\n$a == $b; \r\n```\r\nIn this case the result of the expression is stored in the variable `$a`, while our string is in `$b`.<br/>\r\nThen the assertion simply test the equality of the two.\r\n```\r\n/* Alternative 2 */\r\nlet $a = /inventory/book[1];\r\n$a/title == “Snow Crash”;\r\n```\r\nInstead, in the alternative two, the value assigned to the variable `$a` is an [_SDO_](#sdo), i.e. an object containing other objects (as you can see from the xml file, a book holds nodes like _title_, _authors_, _publisher_, etc…).<br/>\r\nA representation of the _SDO_ defined by `$a` is\r\n\r\n```\r\n$a = {\r\n    year = 2000,\r\n    title = ”Snow Crash”,\r\n    authors = {\r\n        author = ”Neal Stephenson”\r\n    },\r\n    publisher = ”Spectra”,\r\n    isbn = ”0553380958”,\r\n    price = 15\r\n}\r\n```\r\n\r\nWith the expression `$a/title` we get the string contained by the property title.\r\n\r\nYou can play as you like with variables and xpath navigation. But there’s some exceptions: for example you cannot apply a predicate to a variable (the solution is to use the function `get()`)  or use a variable in steps that is not the first.<br/>\r\nNote that the use of function get is possible when you apply it to an SDO or to an array, it has no sense when the cardinality of the object is one. The function is not intended to substitute the standard navigation, so use it properly.\r\n\r\n```\r\n/* Wrong use of predicate */\r\nlet $a = /inventory/book;\r\n$a[1]/title == “Snow Crash”;\r\n```\r\n```\r\n/* Correct way */\r\nlet $a = /inventory/book;\r\n$a.get(1).get(‘title’) == “Snow Crash”;\r\n```\r\n\r\nAnother possible alternative to the first assertion is the next one\r\n```\r\n/* Alternative 3 – Array */\r\nlet $a = /inventory/book/title;\r\n$a.get(1) == “Snow Crash”;\r\n```\r\n\r\nIn this situation, the declaration’s result is an array with the titles of all the books found:`$a = [“Snow Crash”, “Burning Tower” “Zodiac”]`.<br/>\r\nThen, with the `get()` function, you obtain the first element of the array: `“Snow Crash”`.\r\n\r\n<a name=\"example_toy_2\"></a>\r\n## Second Assertion - Aggregated Functions\r\n```\r\nlet $books = /inventory/book;\r\nlet $authors = $books/authors/author;\r\nexists($author in $authors, numOf($book in $books, $book/authors.contains($author)) > 1);\r\n```\r\n\r\nIn this case, we are looking for the authors that has written more than one book.\r\nThe declarations returns, respectively, the array containing all books and the array with all the authors.<br/>\r\nThe assertion is the result of the nesting of two quantified assertions.<br/>\r\nThe `exists` assertion starts iterating over the elements of the _authors_ array, and, for each _author_, checks the condition. The condition is a comparison between another quantified assertion (this time a `numOf`) which returns a number that as to be greater than one to prove the condition of the `exists`.<br/>\r\nThe `numOf` iterate over all the _books_, obtains the _authors_ of each _book_ and, with the `contains()` function, check if the actual _author_ we are searching is into that book’s authors array.<br/>\r\nThe external assertion has to be true; as already said, this is implicitly deducted from the grammar.\r\n\r\n<a name=\"example_toy_3\"></a>\r\n## Third Assertion - Negated Assertion\r\n```\r\n/* Negated Assertion */\r\nlet $books = /inventory/book;\r\n!( exists($book in $books, $book/title.startsWith($book/publisher.substring(0,1))) );\r\n```\r\n\r\nThis one assert that there is no _books_ which _title_ starts with the same letter as its _publisher_.<br/>\r\nAs you can see, the `exists` assertion is negated (inside brackets and preceded by the exclamation mark `!(...)`).<br/>\r\nThe `startsWith()` bear out the prefix of the book _title_ using as parameter the result of another expression: after getting the book _publisher_, it takes the first letter by the use of the `substring()` function.<br/>\r\n\r\n<a name=\"example_toy_4\"></a>\r\n## Fourth Assertion - Numeric Aggregate Functions\r\n```\r\n/* Test for arithmetic expressions (min, max, avg...) */\r\nlet $prices = /inventory/book/price;\r\nlet $min = min($price in $prices, $price > 0);\r\nlet $max = max($price in $prices, $price > 0);\r\nlet $avg = avg($price in $prices, $price > 0);\r\nlet $prod = product($price in $prices, $price > 0);\r\nlet $sum = sum($price in $prices, $price > 0);\r\n$min == 6.00 && $max == 15 && $avg == 9.5 || $prod > 675.0 && $sum < 28.5;\r\n```\r\n\r\nHere we declare many variables, each of them is containing a number, related to the relative expression: for example, `$min` contains the minimum _price_, in the range of the array `$prices`, that is greater than zero (this condition is very weak, so the expression simply means ‘search the lowest price’). The same reasoning can be done for the other statements.<br/>\r\nThe assertions section presents logical operators AND (`&&`) and an OR operator (`||`): according to the operators priority, the AND operators comes first, so the OR is applied as showed:\r\n```\r\n($min == 6.00 && $max == 15 && $avg == 9.5) || ($prod > 675.0 && $sum < 28.5)\r\n```\r\n\r\nDifferent orders are indicated with the use of bracket, as in the next snippet:\r\n```\r\n$min == 6.00 && $max == 15 && ($avg == 9.5 || $prod > 675.0) && $sum < 28.5\r\n```\r\n\r\n<a name=\"example_toy_5\"></a>\r\n### Fifth Assertion - Expressions\r\n```\r\nlet $exp = 1 + 2 * 4 % 5;\r\nexp == 4;\r\n```\r\n\r\nWSCoL gives also the possibility to use and evaluate numeric expressions (see [Numeric Expression](#num_expr)\r\n```\r\nlet $first_price = /inventory/book[1]/price;\r\n$first_price + /inventory/book[2]/price > /inventory/book[3]/price;\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}