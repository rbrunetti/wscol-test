{"name":"WSCoL-test","tagline":"","body":"# Examples\r\nWSCoL is a very flexible language and for this reason it could be used in various contexts.\r\nIn the following sections you’ll find out some nice application.\r\n## _Toy example_: Book store\r\nJust a little case to understand better about what we’re talking about.\r\n\r\nAt first you need to get the application jar, download it [here]().\r\n\r\nThe input file is the succeeding xml file, __*book.xml*__:\r\n```XML\r\n<inventory>\r\n    <name>InventoryABCD</name>\r\n    <book>\r\n        <year>2000</year>\r\n        <title>Snow Crash</title>\r\n        <authors>\r\n            <author>Neal Stephenson</author>\r\n        </authors>\r\n        <publisher>Spectra</publisher>\r\n        <isbn>0553380958</isbn>\r\n        <price>15</price>\r\n    </book>\r\n    <book>\r\n        <year>2005</year>\r\n        <title>Burning Tower</title>\r\n        <authors>\r\n            <author>Larry Niven</author>\r\n            <author>Jerry Pournelle</author>\r\n        </authors>\r\n        <publisher>Pocket</publisher>\r\n        <isbn>0743416910</isbn>\r\n        <price>6</price>\r\n    </book>\r\n    <book>\r\n        <year>1995</year>\r\n        <title>Zodiac</title>\r\n        <authors>\r\n            <author>Neal Stephenson</author>\r\n        </authors>\r\n        <publisher>Spectra</publisher>\r\n        <isbn></isbn>\r\n        <price>7.50</price>\r\n    </book>\r\n</inventory>\r\n```\r\nThe following assertions are based on this file.\r\n\r\n### First Assertion\r\nNow we have to generate a wscol file with the assertions to verify.\r\nFor convenience just save __*assertions.wscol*__ in the same folder as the xml file and the application jar, then copy-and-paste the next assertion:\r\n```\r\n/inventory/book[1]/title == \"Snow Crash\";\r\n```\r\nLaunch the application from cli with the command\r\n```Shell\r\n$ java –jar WSCoL-App.jar assertion.wscol –xml book.xml\r\n```\r\n\r\nThe assertion says that the title of the first book (note the use of the predicate in square brackets) is equal to `“Snow Crash”` and, obviously, the result is true.\r\nThe expression returns a string and correctly compare it with the string on the right side that we have written.\r\nGiven the flexibility of WSCoL, the same assertion can be written in different manners:\r\n\r\n```\r\n/* Alternative 1 */\r\nlet $a = /inventory/book[1]/title;\r\nlet $b = “Snow Crash”;\r\n$a == $b; \r\n```\r\nIn this case the result of the expression is stored in the variable `$a`, while our string is in `$b`.\r\nThen the assertion simply test the equality of the two.\r\n```\r\n/* Alternative 2 */\r\nlet $a = /inventory/book[1];\r\n$a/title == “Snow Crash”;\r\n```\r\nInstead, in the alternative two, the value assigned to the variable `$a` is an [_SDO_](sdo_ref), i.e. an object containing other objects (as you can see from the xml file, a book holds nodes like _title_, _authors_, _publisher_, etc…).\r\nA representation of the _SDO_ defined by `$a` is\r\n\r\n```\r\n$a = {\r\n    year = 2000,\r\n    title = ”Snow Crash”,\r\n    authors = {\r\n        author = ”Neal Stephenson”\r\n    },\r\n    publisher = ”Spectra”,\r\n    isbn = ”0553380958”,\r\n    price = 15\r\n}\r\n```\r\n\r\nWith the expression `$a/title` we get the string contained by the property title.\r\n\r\nYou can play as you like with variables and xpath navigation. But there’s some exceptions: for example you cannot apply a predicate to a variable (the solution is to use the function `get()`)  or use a variable in steps that is not the first.\r\nNote that the use of function get is possible when you apply it to an SDO or to an array, it has no sense when the cardinality of the object is one. The function is not intended to substitute the standard navigation, so use it properly.\r\n\r\n```\r\n/* Wrong use of predicate */\r\nlet $a = /inventory/book;\r\n$a[1]/title == “Snow Crash”;\r\n```\r\nThe correct way is:\r\n```\r\n/* Correct way */\r\nlet $a = /inventory/book;\r\n$a.get(1).get(‘title’) == “Snow Crash”;\r\n```\r\n\r\nAnother possible alternative to the first assertion is the next one\r\n```\r\n/* Alternative 3 – Array */\r\nlet $a = /inventory/book/title;\r\n$a.get(1) == “Snow Crash”;\r\n```\r\n\r\nIn this situation, the declaration’s result is an array with the titles of all the books found:\r\n`$a = [“Snow Crash”, “Burning Tower” “Zodiac”]`.\r\n\r\nThen, with the `get()` function, you obtain the first element of the array: `“Snow Crash”`.\r\n\r\n\r\n### Second Assertion - Aggregated Functions\r\n```\r\nlet $books = /inventory/book;\r\nlet $authors = $books/authors/author;\r\nexists($author in $authors, numOf($book in $books, $book/authors.contains($author)) > 1);\r\n```\r\n\r\nIn this case, we are looking for the authors that has written more than one book.\r\nThe declarations returns, respectively, the array containing all books and the array with all the authors. \r\nThe assertion is the result of the nesting of two quantified assertions.\r\nThe `exists` assertion starts iterating over the elements of the _authors_ array, and, for each _author_, checks the condition. The condition is a comparison between another quantified assertion (this time a `numOf`) which returns a number that as to be greater than one to prove the condition of the `exists`.\r\nThe `numOf` iterate over all the _books_, obtains the _authors_ of each _book_ and, with the `contains()` function, check if the actual _author_ we are searching is into that book’s authors array.\r\nThe external assertion has to be true; as already said, this is implicitly deducted from the grammar.\r\n\r\n\r\n### Third Assertion - Negated Assertion\r\n```\r\n/* Negated Assertion */\r\nlet $books = /inventory/book;\r\n!( exists($book in $books, $book/title.startsWith($book/publisher.substring(0,1))) );\r\n```\r\n\r\nThis one assert that there is no _books_ which _title_ starts with the same letter as its _publisher_.\r\nAs you can see, the `exists` assertion is negated (inside brackets and preceded by the exclamation mark `!(...)`).\r\nThe `startsWith()` bear out the prefix of the book _title_ using as parameter the result of another expression: after getting the book _publisher_, it takes the first letter by the use of the `substring()` function.\r\n\r\n### Fourth Assertion - Numeric Aggregate Functions\r\n```\r\n/* Test for arithmetic expressions (min, max, avg...) */\r\nlet $prices = /inventory/book/price;\r\nlet $min = min($price in $prices, $price > 0);\r\nlet $max = max($price in $prices, $price > 0);\r\nlet $avg = avg($price in $prices, $price > 0);\r\nlet $prod = product($price in $prices, $price > 0);\r\nlet $sum = sum($price in $prices, $price > 0);\r\n$min == 6.00 && $max == 15 && $avg == 9.5 || $prod > 675.0 && $sum < 28.5;\r\n```\r\n\r\nHere we declare many variables, each of them is containing a number, related to the relative expression: for example, `$min` contains the minimum _price_, in the range of the array `$prices`, that is greater than zero (this condition is very weak, so the expression simply means ‘search the lowest price’). The same reasoning can be done for the other statements.\r\nThe assertions section presents logical operators AND (`&&`) and an OR operator (`||`): according to the operators priority, the AND operators comes first, so the OR is applied as showed:\r\n```\r\n($min == 6.00 && $max == 15 && $avg == 9.5) || ($prod > 675.0 && $sum < 28.5)\r\n```\r\n\r\nDifferent orders are indicated with the use of bracket, as in the next snippet:\r\n```\r\n$min == 6.00 && $max == 15 && ($avg == 9.5 || $prod > 675.0) && $sum < 28.5\r\n```\r\n\r\n### Fifth Assertion - Expressions\r\n```\r\nlet $exp = 1 + 2 * 4 % 5;\r\nexp == 4;\r\n```\r\n\r\nWSCoL gives also the possibility to use and evaluate expressions, using the canonical operands: sum (`+`), subtraction (`-`), multiplication (`*`), division (`/`) and modulo (`%`). The priorities between these operators is exactly as they are listed before, and, as usual, precedence could be modified with brackets.\r\n_Expressions_ can also be calculated using navigation path and variables, as long as they return numeric values.\r\n```\r\nlet $first_price = /inventory/book[1]/price;\r\n$first_price + /inventory/book[2]/price > /inventory/book[3]/price;\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}