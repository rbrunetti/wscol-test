 _______  _____  ______   _____ 
    |    |     | |     \ |     |
    |    |_____| |_____/ |_____|

	• DataObject/JSON/whatever input type 
		-> make just a json parser 
	• 
	• Test the grammar
	• Make a clean project: new project importing the grammar jar and throw methods outside Main.java! (-> how to organize it smartly?)
	• Thesis text
		-> make the tutorial site than use it for the thesis 
	• Tutorial Site & smart use cases
	• 
	• 
	• 
 ______   _____  _     _ ______  _______ _______
 |     \ |     | |     | |_____]    |    |______
 |_____/ |_____| |_____| |_____]    |    ______|
  
	• Method 'evaluate' and the aggregation of all the results with the same key together (ex. /inv./book gives 18 elements, not 3!)
	• 
	• 
 _____ _______  _____         _______ _______ _______ __   _ _______ _______ ______ 
   |   |  |  | |_____] |      |______ |  |  | |______ | \  |    |    |______ |     \
 __|__ |  |  | |       |_____ |______ |  |  | |______ |  \_|    |    |______ |_____/
 
 	• Base rules of the grammar (...)
 	• Make a TODO list :)
 	• Rules for make assertions with AND, OR and NOT (with the corresponding priority: NOT > AND > OR)
 	• Rules for quantified assertions 'forall', 'exists' and 'numOf'
 	• Runtime errors (ex. quantified assertion over a single value variable and not on a set of value) throws exception with a corresponding message
 	• Implementation of rules for 'max', 'min', 'avg', 'sum' and 'product'
 		• BUT with the correction of the rule Variable ('min', 'max', etc are now language keyword, so I could not declare a variable '$min' without correcting the Variable rule)
 		• BUT float numbers could be different for a minimum fraction, maybe we can use a limited number of decimal digit
 	• Make the boolean value in AssertionForm implicit (ex. exists(...) = true -> exists(...))
 	• Better syntax errors messages: what and why is wrong; also for runtime errors with values printing
	• Values can contain variable referring to other object
 	• Function 'contains' for DataObject: search for an Object (of any type) deeply inside them
	• Added the use of variables inside all the functions, even inside the attribute of a Step
		• BUT without the possibility to use functions: no "/step[$a.length()]", only "/step[$a]" or "/step[property==$a]"
		• values of the passed variable must be of the correct type (ex. 1 is a Double, "1" a String...no parsing from one to another)
 	• Function 'get' for DataObject: get the element of the DataObject using a numeric index or its key
 		• BUT in cases in which many values are associated to the same key the process is stopped --> it's an improper use of 'get' => use common DataObject navigation with slashes
 		 	(ex. /inventory.get("book") gives three DataObjects, but with /inventory/book we get the same result in the correct way)  
	• Function 'cardinality' for DataObject: get the number of elements contained in the DataObject (0, 1 or N). It's the unique function applicable to an empty object.
		• only for the DataObjects because we it's the unique data type that could be empty (empty String or Double it's not possible, so the function is useless for them)   
	• Implicit 'true' even for functions (startsWith, endsWith, contains)
	•  
	•  
