/*
 * generated by Xtext
 */
package org.xtext.example.xpt.generator;

import java.io.File;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.xtext.util.CancelIndicator;
import org.eclipse.xtext.validation.CheckMode;
import org.eclipse.xtext.validation.IResourceValidator;
import org.eclipse.xtext.validation.Issue;
import org.xtext.example.xpt.generator.dataobject.DataObject;
import org.xtext.example.xpt.services.XptGrammarAccess.AssertionBracedElements;
import org.xtext.example.xpt.xpt.Assertion;
import org.xtext.example.xpt.xpt.AssertionAnd;
import org.xtext.example.xpt.xpt.AssertionBraced;
import org.xtext.example.xpt.xpt.AssertionForm;
import org.xtext.example.xpt.xpt.AssertionNot;
import org.xtext.example.xpt.xpt.AssertionOr;
import org.xtext.example.xpt.xpt.Assertions;
import org.xtext.example.xpt.xpt.Declaration;
import org.xtext.example.xpt.xpt.Model;
import org.xtext.example.xpt.xpt.impl.AssertionAndImpl;
import org.xtext.example.xpt.xpt.impl.AssertionFormImpl;
import org.xtext.example.xpt.xpt.impl.AssertionNotImpl;
import org.xtext.example.xpt.xpt.impl.AssertionOrImpl;

import com.google.inject.Inject;
import com.google.inject.Injector;
import com.google.inject.Provider;

public class Main {

	@Inject
	private Provider<ResourceSet> resourceSetProvider;

	@Inject
	private IResourceValidator validator;

	private static String queriesPath = "src/org/xtext/example/xpt/queries.xpt";
	private static String xmlFilePath = "src/org/xtext/example/xpt/book.xml";
	@SuppressWarnings("unused")
	private static String xmlFilePath2 = "src/org/xtext/example/xpt/book2.xml";

	private static Map<String, Object> variables = new HashMap<>();
	private static DataObject input = new DataObject();

	public static void main(String[] args) {
		Injector injector = new org.xtext.example.xpt.XptStandaloneSetupGenerated().createInjectorAndDoEMFRegistration();
		Main main = injector.getInstance(Main.class);

		File f = new File(queriesPath);
		String string = f.toURI().toString();

		main.runGenerator(string);
	}

	@SuppressWarnings("unused")
	private DataObject hashMapTest() {
		DataObject data = new DataObject();
		DataObject books = new DataObject();
		DataObject book1 = new DataObject();
		DataObject book2 = new DataObject();

		book1.put("title", "Snow Crash");
		book1.put("year", (double) 2000);
		book1.put("author", "Neal Stephenson");
		book1.put("publisher", "Spectra");
		book1.put("isbn", "0553380958");
		book1.put("price", (double) 15.0);
		books.put("book", book1);

		book2.put("title", "Burning Tower");
		book2.put("year", (double) 2005);
		book2.put("author", "Larry Niven");
		book2.put("author", "Jerry Pournelle");
		book2.put("publisher", "Pocket");
		book2.put("isbn", "0743416910");
		book2.put("price", (double) 5.99);
		books.put("book", book2);

		books.put("book", (double) 5);

		data.put("inventory", books);

		return data;

	}

	protected void runGenerator(String string) {
		// load the resource
		ResourceSet set = resourceSetProvider.get();
		Resource resource = set.getResource(URI.createURI(string), true);

		// validate the resource
		List<Issue> list = validator.validate(resource, CheckMode.ALL, CancelIndicator.NullImpl);
		if (!list.isEmpty()) {
			System.err.println("*** MALFORMED ASSERTIONS ***");
			for (Issue issue : list) {
				System.err.println(issue);
			}
			return;
		}

		// get contents
		Model model = (Model) resource.getContents().get(0);
		EObjectContainmentEList<Declaration> declarations = (EObjectContainmentEList<Declaration>) model.getDeclarations();
		Assertions assertionSet = model.getAssertionSet();

		// get num of assertions
		int count = 0;
		TreeIterator<EObject> a = assertionSet.eAllContents();
		while (a.hasNext()) {
			EObject next = a.next();
			if (next instanceof AssertionForm) {
				count = count + 1;
			}
		}

		// get input: via xml parsing or passed DataObject
		input = new DataObject(xmlFilePath);
		// input = hashMapTest();
		System.out.println("################## INPUT ###################\n" + input + "\n");

		if (assertionSet.eContents().isEmpty()) {
			System.out.println("No assertions. Execution halted.");
			return;
		}

		System.out.println("################## RULES ###################");
		System.out.println(declarations.size() + " variable declarated.");
		System.out.println(count + " assertions has been found.\n");

		// get variables declaration and sets the hashmap
		setVariable(declarations);

		// verify the assertions
		System.out.println("\n################ ASSERTIONS ################");
		System.out.println("Result: " + verifyAssertions(assertionSet));

	}
	
	private boolean verifyAssertions(Assertions assertions) {
		EList<EObject> a = assertions.eContents();
		if(assertions instanceof AssertionAnd) {
			return (verifyAssertions((Assertions) a.get(0)) & verifyAssertions((Assertions) a.get(1)));
		} else if(assertions instanceof AssertionOr) {
			return (verifyAssertions((Assertions) a.get(0)) | verifyAssertions((Assertions) a.get(1)));
		} else if(assertions instanceof AssertionNot) {
			return !verifyAssertions(((AssertionNot)assertions).getInnerFormula());
		} else if(assertions instanceof AssertionBraced) {
			return verifyAssertions(((AssertionBraced) assertions).getInnerFormula());
		} else if(assertions instanceof AssertionForm){
			try {
				return verifyAssertionForm((AssertionForm) assertions);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		return false;
	}

	/**
	 * Check all the assertions
	 * 
	 * @param assertionSet
	 * @throws Exception
	 */
	private boolean verifyAssertionForm(AssertionForm af) throws Exception {
		Object laObj, raObj;
		String op, condition;
		laObj = doQueries(af.getLeftAssert());
		raObj = doQueries(af.getRightAssert());
		op = af.getOp(); // get Op for using it for the comparisons
		condition = Helper.assertionFormToString(af);

		// if the assertion's query has a numeric result
		if (laObj instanceof Double && raObj instanceof Double) {
			double la = (Double) laObj;
			double ra = (Double) raObj;
			switch (op) {
			case ">":
				if (la > ra) {
					System.out.println("Assertion '" + condition + "' is verified.");
					return true;
				} else {
					System.out.println("Assertion '" + condition + "' is wrong.");
					return false;
				}
			case ">=":
				if (la >= ra) {
					System.out.println("Assertion '" + condition + "' is verified.");
					return true;
				} else {
					System.out.println("Assertion '" + condition + "' is wrong.");
					return false;
				}
			case "<":
				if (la < ra) {
					System.out.println("Assertion '" + condition + "' is verified.");
					return true;
				} else {
					System.out.println("Assertion '" + condition + "' is wrong.");
					return false;
				}
			case "<=":
				if (la <= ra) {
					System.out.println("Assertion '" + condition + "' is verified.");
					return true;
				} else {
					System.out.println("Assertion '" + condition + "' is wrong.");
					return false;
				}
			case "=":
				if (la == ra) {
					System.out.println("Assertion '" + condition + "' is verified.");
					return true;
				} else {
					System.out.println("Assertion '" + condition + "' is wrong.");
					return false;
				}
			case "!=":
				if (la != ra) {
					System.out.println("Assertion '" + condition + "' is verified.");
					return true;
				} else {
					System.out.println("Assertion '" + condition + "' is wrong.");
					return false;
				}
			}
		} else if (laObj instanceof String && raObj instanceof String) {
			switch (op) {
			case "=":
				if (laObj.equals(raObj)) {
					System.out.println("Assertion '" + condition + "' is verified.");
					return true;
				} else {
					System.out.println("Assertion '" + condition + "' is wrong.");
					return false;
				}

			case "!=":
				if (!laObj.equals(raObj)) {
					System.out.println("Assertion '" + condition + "' is verified.");
					return true;
				} else {
					System.out.println("Assertion '" + condition + "' is wrong.");
					return false;
				}
			}
		} else if (laObj != null && raObj != null) {
			System.err.println("Assertion '" + condition + "' malformed: data types conflict.");
			throw new Exception();
		} else {
			System.err.println("Unable to evaluate assertion '" + condition + "', due to erroneous variables declaration.");
			throw new Exception();
		}
		return false;
	}

	/**
	 * Print the result of the evaluation of queries
	 */
	private Object doQueries(Assertion assertion) {
		Object result = new Object();
		// if the assertion is a constant it's not going to be an xpath query
		if (assertion.getConstant() != null) {
			result = ((assertion.getConstant().getString() == null) ? assertion.getConstant().getInt() : assertion.getConstant().getString());
			return result;
		}
		// TODO sto trattando un solo valore! Non considera variabili multivalore

		// look if there's a placeholder, if any substitute it with its values (note: the placeholder is always on the first step!)
		if (assertion.getQuery().getSteps().get(0).getPlaceholder() != null) {
			if (!variables.containsKey(assertion.getQuery().getSteps().get(0).getPlaceholder())) { // TODO da valutare come trattare (dichiarazioni sbagliate -> variabile assente)
				return null;
			}
			Object value = variables.get(assertion.getQuery().getSteps().get(0).getPlaceholder());
			try {
				if (assertion.getQuery().getSteps().size() > 1) { // if there query goes deeper
					result = ((DataObject) value).evaluate(assertion.getQuery()).getFirst();
				} else {
					result = ((DataObject) value).getFirst();
				}
			} catch (ClassCastException e) {
				result = value;
			}
		} else {
			result = input.evaluate(assertion.getQuery());
			result = ((DataObject) result).getFirst();
		}

		// *** FUNCTIONS ***
		if (assertion.getFunction() != null) {
			switch (assertion.getFunction()) {
			case "uppercase":
				result = ((String) result).toUpperCase();
				break;
			case "length":
				result = (double) ((String) result).length();
				break;
			default:
				break;
			}
		}
		return result;
	}

	/**
	 * Set variables according to the declarations
	 */
	private void setVariable(EObjectContainmentEList<Declaration> declarations) {
		System.out.println("############### DECLARATIONS ###############");
		for (Declaration d : declarations) {
			if (d.getAssert().getConstant() != null) {
				variables.put(d.getVar(), d.getAssert().getConstant());
			} else {
				DataObject result = input.evaluate(d.getAssert().getQuery());
				// TODO come trattare il fatto di avere un risultato?
				// if the assertion is wrong (with respect to the input variable) or empty the program is halted
				if (result == null) {
					System.err.println("Unable to evaluate '" + d.getVar() + " = " + Helper.assertionToString(d.getAssert()) + "'. Please check it.");
					System.exit(0);
				} else {
					variables.put(d.getVar(), result);
				}
			}
			System.out.println(d.getVar() + " = " + Helper.assertionToString(d.getAssert()));
		}
		return;
	}

}