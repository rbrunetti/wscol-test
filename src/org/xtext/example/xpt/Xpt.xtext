grammar org.xtext.example.xpt.Xpt with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate xpt "http://www.xtext.org/example/xpt/Xpt"

Model:
	declarations+=Declaration*
	assertionSet=AssertionOr ';';

Declaration:
	'let' var=Variable '=' assert=Assertion ';';

AssertionOr returns Assertions:
	AssertionAnd ({AssertionOr.left=current} '||' right=AssertionAnd)*;

AssertionAnd returns Assertions:
	HighProrityAssertion ({AssertionAnd.left=current} '&&' right=HighProrityAssertion)*;

HighProrityAssertion returns Assertions:
	AssertionNot | AssertionForm | AssertionBraced | AssertionQuantified;

AssertionBraced:
	'(' innerFormula=AssertionOr ')';

AssertionNot:
	'!' '(' innerFormula=AssertionOr ')';

AssertionQuantified:
	quantifier=Quantifier '(' alias=Variable 'in' values=Variable ',' conditions+=AssertionOr ')';

AssertionForm:
	leftAssert=Assertion op=Rop rightAssert=Assertion;

Assertion:
	query=Query ('.' function=Function)? | constant=Constant | values=Values;

Query:
	'(' steps+=Step+ ')' | steps+=Step+;

Step:
	'/' name=ID ('[' attribute=Attribute ']')? | placeholder=Variable;

Attribute:
	property=ID (op=Rop numberValue=NUMBER | op=StringRop strValue=STRING) | number=NUMBER;

StringRop:
	'=' | "!=";

Rop:
	StringRop | '<' | '<=' | '>' | '>=';

Function:
	'uppercase' | 'length' | ID;

Quantifier:
	'forall' | 'exists' | 'numOf';

Variable:
	'$' ID;

Values:
	'[' value+=Constant (',' value+=Constant)* ']';

Constant:
	number=NUMBER | string=STRING;
	
terminal NUMBER returns ecore::EDouble:
	('0'..'9')* ('.' ('0'..'9')+)?;

terminal INT returns ecore::EInt: // override della regola di default
	'this one has been deactivated';