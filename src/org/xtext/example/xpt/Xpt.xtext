grammar org.xtext.example.xpt.Xpt with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate xpt "http://www.xtext.org/example/xpt/Xpt"

Model:
	declarations+=Declaration*
	assertionSet=AssertionSet ';';

Declaration:
	'let' var=Variable '=' assert=Assertion ';';

AssertionSet returns Assertions:
	AssertionAnd ({AssertionSet.left=current} '||' right=AssertionAnd)*;

AssertionAnd returns Assertions:
	HighProrityAssertion ({AssertionAnd.left=current} '&&' right=HighProrityAssertion)*;

HighProrityAssertion returns Assertions:
	NegatedFormula | BracedFormula | AssertionForm //| QuantifiedFormula 
;

//QuantifiedFormula:
//	quantifier = Quantifier '[' variables+=LOWERCASE_ID (',' variables += LOWERCASE_ID)* ']' innerFormula = LowBindFormula
//;

NegatedFormula:
	'!' innerFormula=AssertionSet;

BracedFormula returns Assertions:
	'(' AssertionSet ')';

AssertionForm:
	leftAssert=Assertion op=Rop rightAssert=Assertion;

Assertion:
	query=Query ('.' function=Function)? | constant=Constant;

Query:
	'(' steps+=Step+ ')' | steps+=Step+;

Step:
	'/' name=ID ('[' attribute=Attribute ']')? | placeholder=Variable;

Attribute:
	property=ID (op=Rop intValue=NUMBER | op=StringRop strValue=STRING) | int=NUMBER;

StringRop:
	'=' | "!=";

Rop:
	StringRop | '<' | '<=' | '>' | '>=';

Function:
	'uppercase' | 'length' | ID;

Constant:
	{Constant} (int=NUMBER | string=STRING);

	//Quantifier:
//	'forall' | 'exists' | 'numOf'
//;
Variable:
	'$' ID;

terminal NUMBER returns ecore::EDouble:
	('0'..'9')* ('.' ('0'..'9')+)?;

terminal INT returns ecore::EInt: // override della regola di default
	'this one has been deactivated';