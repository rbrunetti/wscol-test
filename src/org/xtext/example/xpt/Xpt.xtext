/************************************************************************************
 * WSCol (Web Service Constraint Language) is a special-purpose monitoring language,
 * by which it's possible to express directives on both functional and non-functional
 * properties; which are essentially pre- and post-conditions on the interaction with
 * external partner services.
 * It's suitable to express general dependability properties as safety, integrity,
 * availability and reliability.
 ***********************************************************************************/
grammar org.xtext.example.xpt.Xpt with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate xpt "http://www.xtext.org/example/xpt/Xpt"

Model:
	declarations+=Declaration*
	assertionSet=AssertionOr ';';
	
// Assign to the variable a value (a String, Double, Boolean or SDO)
Declaration:
	'let' var=Variable '=' assert=(Assertion | AssertionQuantifiedBoolean) ';';

// Assertion results in logical operation OR
AssertionOr returns Assertions:
	AssertionAnd ({AssertionOr.left=current} '||' right=AssertionAnd)*;

// Assertion results in logical operation AND
AssertionAnd returns Assertions:
	AssertionHP ({AssertionAnd.left=current} '&&' right=AssertionHP)*;

// Assertion results in logical operation with highest priority (NOT and parentheses)
AssertionHP returns Assertions:
	(=> AssertionForm | AssertionNot | AssertionBraced);

// Assertion with parentheses
AssertionBraced:
	'(' innerFormula=AssertionOr ')';

// Assertion with logical operator NOT
AssertionNot:
	'!' '(' innerFormula=AssertionOr ')';

// Kinds of Assertion: with comparison and without (2nd and 3rd case are for boolean comparison and their result is implicitly 'true')
AssertionForm:
	(=> AssertionStdCmp | AssertionQuantifiedBoolean | AssertionBoolean);

// Assertions making a standard comparison between values
AssertionStdCmp:
	leftAssert=Assertion op=Rop rightAssert=Assertion;

// Assertion
Assertion:
	AssertionQuantifiedNumeric | '[' values=Values ']' | Expression | bool = BOOLEAN;

// Assertion with boolean result
AssertionBoolean returns Assertion:
	steps+=Step+ ('.' functions+=Function)* '.' functions+=FunctionBoolean;

// Assertion with quantifiers for boolean results
AssertionQuantifiedBoolean returns AssertionQuantified:
	quantifier=BoolQuantifier '(' alias=Variable 'in' var=Variable ',' conditions=AssertionOr ')';

// Assertion with quantifiers for numeric results
AssertionQuantifiedNumeric returns AssertionQuantified:
	quantifier=NumbQuantifier '(' alias=Variable 'in' var=Variable ',' conditions=AssertionOr ')';

// Steps describing the navigation path through an SDO
Step:
	'/' name=ID ('[' predicate=Predicate ']')? | placeholder=Variable;

// Predicate for SDO navigation: according to the operation checks the searched value, if possible
Predicate:
	property=ID (op=Rop numberValue=NUMBER | op=StringRop strValue=STRING | op=Rop varValue=Variable) | number=NUMBER | var=Variable;

// Function
Function:
	name=ID '(' (params=Values)? ')';

// Function that gives boolean result
FunctionBoolean returns Function:
	name=('contains'|'startsWith'|'endsWith') '(' (params=Values)? ')';

Expression:
	Addition;
	
Addition returns Expression:
	Multiplication (({Plus.left=current} '+' | {Minus.left=current} '-') right=Multiplication)*;
	
Multiplication returns Expression:
	PrimaryExpression (({Multi.left=current} '*' | {Div.left=current} '/' | {Rest.left=current} '%') right=PrimaryExpression)*;
	
PrimaryExpression returns Expression:
	Value | '(' Addition ')';

// List of values
Values:
	value+=Value (',' value+=Value)*;

// Value could be a constant (alphanumeric or numeric) or obtained by an SDO's property
Value:
	Constant | steps+=Step+ ('.' functions+=Function)*;

Constant:
	number=NUMBER | string=STRING;

// Variable (NumbQuantifier is added for give the possibility to use 'max', 'min', etc. as variables name)
Variable:
	'$' (ID | NumbQuantifier);

BoolQuantifier:
	'forall' | 'exists';

NumbQuantifier:
	'numOf' | 'sum' | 'avg' | 'min' | 'max' | 'product';

// Relational Operation for Strings
StringRop:
	'==' | "!=";

// Relational Operation
Rop:
	StringRop | '<' | '<=' | '>' | '>=';

terminal BOOLEAN returns ecore::EBoolean:
	'true' | 'false' | 'TRUE' | 'FALSE';

terminal NUMBER returns ecore::EDouble:
	('-')? ('0'..'9')* ('.' ('0'..'9')+)?;

terminal INT returns ecore::EInt: // override della regola di default
	'this one has been deactivated';