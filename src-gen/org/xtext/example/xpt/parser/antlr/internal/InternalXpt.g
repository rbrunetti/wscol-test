/*
* generated by Xtext
*/
grammar InternalXpt;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.xtext.example.xpt.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.xpt.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.xpt.services.XptGrammarAccess;

}

@parser::members {

 	private XptGrammarAccess grammarAccess;
 	
    public InternalXptParser(TokenStream input, XptGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected XptGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getDeclarationsDeclarationParserRuleCall_0_0()); 
	    }
		lv_declarations_0_0=ruleDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"declarations",
        		lv_declarations_0_0, 
        		"Declaration");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getQuerySetAssertionSetParserRuleCall_1_0()); 
	    }
		lv_querySet_1_0=ruleAssertionSet		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		set(
       			$current, 
       			"querySet",
        		lv_querySet_1_0, 
        		"AssertionSet");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleDeclaration
entryRuleDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDeclarationRule()); }
	 iv_ruleDeclaration=ruleDeclaration 
	 { $current=$iv_ruleDeclaration.current; } 
	 EOF 
;

// Rule Declaration
ruleDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='let' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDeclarationAccess().getLetKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDeclarationAccess().getVarVariableParserRuleCall_1_0()); 
	    }
		lv_var_1_0=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeclarationRule());
	        }
       		set(
       			$current, 
       			"var",
        		lv_var_1_0, 
        		"Variable");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDeclarationAccess().getEqualsSignKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDeclarationAccess().getAssertAssertionParserRuleCall_3_0()); 
	    }
		lv_assert_3_0=ruleAssertion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeclarationRule());
	        }
       		set(
       			$current, 
       			"assert",
        		lv_assert_3_0, 
        		"Assertion");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getDeclarationAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleAssertionSet
entryRuleAssertionSet returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAssertionSetRule()); }
	 iv_ruleAssertionSet=ruleAssertionSet 
	 { $current=$iv_ruleAssertionSet.current; } 
	 EOF 
;

// Rule AssertionSet
ruleAssertionSet returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAssertionSetAccess().getAssertionsAssertionFormParserRuleCall_0_0()); 
	    }
		lv_assertions_0_0=ruleAssertionForm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssertionSetRule());
	        }
       		add(
       			$current, 
       			"assertions",
        		lv_assertions_0_0, 
        		"AssertionForm");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='&&' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAssertionSetAccess().getAmpersandAmpersandKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAssertionSetAccess().getAssertionsAssertionFormParserRuleCall_1_1_0()); 
	    }
		lv_assertions_2_0=ruleAssertionForm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssertionSetRule());
	        }
       		add(
       			$current, 
       			"assertions",
        		lv_assertions_2_0, 
        		"AssertionForm");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getAssertionSetAccess().getSemicolonKeyword_2());
    }
)
;





// Entry rule entryRuleAssertionForm
entryRuleAssertionForm returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAssertionFormRule()); }
	 iv_ruleAssertionForm=ruleAssertionForm 
	 { $current=$iv_ruleAssertionForm.current; } 
	 EOF 
;

// Rule AssertionForm
ruleAssertionForm returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAssertionFormAccess().getLeftAssertAssertionParserRuleCall_0_0()); 
	    }
		lv_leftAssert_0_0=ruleAssertion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssertionFormRule());
	        }
       		set(
       			$current, 
       			"leftAssert",
        		lv_leftAssert_0_0, 
        		"Assertion");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAssertionFormAccess().getOpRopParserRuleCall_1_0()); 
	    }
		lv_op_1_0=ruleRop		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssertionFormRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_1_0, 
        		"Rop");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAssertionFormAccess().getRightAssertAssertionParserRuleCall_2_0()); 
	    }
		lv_rightAssert_2_0=ruleAssertion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssertionFormRule());
	        }
       		set(
       			$current, 
       			"rightAssert",
        		lv_rightAssert_2_0, 
        		"Assertion");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleAssertion
entryRuleAssertion returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAssertionRule()); }
	 iv_ruleAssertion=ruleAssertion 
	 { $current=$iv_ruleAssertion.current; } 
	 EOF 
;

// Rule Assertion
ruleAssertion returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getAssertionAccess().getQueryQueryParserRuleCall_0_0_0()); 
	    }
		lv_query_0_0=ruleQuery		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssertionRule());
	        }
       		set(
       			$current, 
       			"query",
        		lv_query_0_0, 
        		"Query");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='.' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAssertionAccess().getFullStopKeyword_0_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAssertionAccess().getFunctionFunctionParserRuleCall_0_1_1_0()); 
	    }
		lv_function_2_0=ruleFunction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssertionRule());
	        }
       		set(
       			$current, 
       			"function",
        		lv_function_2_0, 
        		"Function");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getAssertionAccess().getConstantConstantParserRuleCall_1_0()); 
	    }
		lv_constant_3_0=ruleConstant		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssertionRule());
	        }
       		set(
       			$current, 
       			"constant",
        		lv_constant_3_0, 
        		"Constant");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleQuery
entryRuleQuery returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getQueryRule()); }
	 iv_ruleQuery=ruleQuery 
	 { $current=$iv_ruleQuery.current; } 
	 EOF 
;

// Rule Query
ruleQuery returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getQueryAccess().getLeftParenthesisKeyword_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getQueryAccess().getStepsStepParserRuleCall_0_1_0()); 
	    }
		lv_steps_1_0=ruleStep		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQueryRule());
	        }
       		add(
       			$current, 
       			"steps",
        		lv_steps_1_0, 
        		"Step");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_2=')' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getQueryAccess().getRightParenthesisKeyword_0_2());
    }
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getQueryAccess().getStepsStepParserRuleCall_1_0()); 
	    }
		lv_steps_3_0=ruleStep		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQueryRule());
	        }
       		add(
       			$current, 
       			"steps",
        		lv_steps_3_0, 
        		"Step");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
;





// Entry rule entryRuleStep
entryRuleStep returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStepRule()); }
	 iv_ruleStep=ruleStep 
	 { $current=$iv_ruleStep.current; } 
	 EOF 
;

// Rule Step
ruleStep returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='/' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getStepAccess().getSolidusKeyword_0_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getStepAccess().getNameIDTerminalRuleCall_0_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStepRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(	otherlv_2='[' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getStepAccess().getLeftSquareBracketKeyword_0_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStepAccess().getAttributeAttributeParserRuleCall_0_2_1_0()); 
	    }
		lv_attribute_3_0=ruleAttribute		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStepRule());
	        }
       		set(
       			$current, 
       			"attribute",
        		lv_attribute_3_0, 
        		"Attribute");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=']' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getStepAccess().getRightSquareBracketKeyword_0_2_2());
    }
)?)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getStepAccess().getPlaceholderVariableParserRuleCall_1_0()); 
	    }
		lv_placeholder_5_0=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStepRule());
	        }
       		set(
       			$current, 
       			"placeholder",
        		lv_placeholder_5_0, 
        		"Variable");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleAttribute
entryRuleAttribute returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttributeRule()); }
	 iv_ruleAttribute=ruleAttribute 
	 { $current=$iv_ruleAttribute.current; } 
	 EOF 
;

// Rule Attribute
ruleAttribute returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		lv_property_0_0=RULE_ID
		{
			newLeafNode(lv_property_0_0, grammarAccess.getAttributeAccess().getPropertyIDTerminalRuleCall_0_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAttributeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"property",
        		lv_property_0_0, 
        		"ID");
	    }

)
)(((
(
		{ 
	        newCompositeNode(grammarAccess.getAttributeAccess().getOpRopParserRuleCall_0_1_0_0_0()); 
	    }
		lv_op_1_0=ruleRop		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributeRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_1_0, 
        		"Rop");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_intValue_2_0=RULE_NUMBER
		{
			newLeafNode(lv_intValue_2_0, grammarAccess.getAttributeAccess().getIntValueNUMBERTerminalRuleCall_0_1_0_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAttributeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"intValue",
        		lv_intValue_2_0, 
        		"NUMBER");
	    }

)
))
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getAttributeAccess().getOpStringRopParserRuleCall_0_1_1_0_0()); 
	    }
		lv_op_3_0=ruleStringRop		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributeRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_3_0, 
        		"StringRop");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_strValue_4_0=RULE_STRING
		{
			newLeafNode(lv_strValue_4_0, grammarAccess.getAttributeAccess().getStrValueSTRINGTerminalRuleCall_0_1_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAttributeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"strValue",
        		lv_strValue_4_0, 
        		"STRING");
	    }

)
))))
    |(
(
		lv_int_5_0=RULE_NUMBER
		{
			newLeafNode(lv_int_5_0, grammarAccess.getAttributeAccess().getIntNUMBERTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAttributeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"int",
        		lv_int_5_0, 
        		"NUMBER");
	    }

)
))
;





// Entry rule entryRuleStringRop
entryRuleStringRop returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getStringRopRule()); } 
	 iv_ruleStringRop=ruleStringRop 
	 { $current=$iv_ruleStringRop.current.getText(); }  
	 EOF 
;

// Rule StringRop
ruleStringRop returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStringRopAccess().getEqualsSignKeyword_0()); 
    }

    |
	kw='!=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStringRopAccess().getExclamationMarkEqualsSignKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleRop
entryRuleRop returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getRopRule()); } 
	 iv_ruleRop=ruleRop 
	 { $current=$iv_ruleRop.current.getText(); }  
	 EOF 
;

// Rule Rop
ruleRop returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getRopAccess().getStringRopParserRuleCall_0()); 
    }
    this_StringRop_0=ruleStringRop    {
		$current.merge(this_StringRop_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
	kw='<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRopAccess().getLessThanSignKeyword_1()); 
    }

    |
	kw='<=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRopAccess().getLessThanSignEqualsSignKeyword_2()); 
    }

    |
	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRopAccess().getGreaterThanSignKeyword_3()); 
    }

    |
	kw='>=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRopAccess().getGreaterThanSignEqualsSignKeyword_4()); 
    }
)
    ;





// Entry rule entryRuleFunction
entryRuleFunction returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionRule()); } 
	 iv_ruleFunction=ruleFunction 
	 { $current=$iv_ruleFunction.current.getText(); }  
	 EOF 
;

// Rule Function
ruleFunction returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='uppercase' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFunctionAccess().getUppercaseKeyword_0()); 
    }

    |
	kw='length' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFunctionAccess().getLengthKeyword_1()); 
    }

    |    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getFunctionAccess().getIDTerminalRuleCall_2()); 
    }
)
    ;





// Entry rule entryRuleConstant
entryRuleConstant returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstantRule()); }
	 iv_ruleConstant=ruleConstant 
	 { $current=$iv_ruleConstant.current; } 
	 EOF 
;

// Rule Constant
ruleConstant returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getConstantAccess().getConstantAction_0(),
            $current);
    }
)((
(
		lv_int_1_0=RULE_NUMBER
		{
			newLeafNode(lv_int_1_0, grammarAccess.getConstantAccess().getIntNUMBERTerminalRuleCall_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstantRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"int",
        		lv_int_1_0, 
        		"NUMBER");
	    }

)
)
    |(
(
		lv_string_2_0=RULE_STRING
		{
			newLeafNode(lv_string_2_0, grammarAccess.getConstantAccess().getStringSTRINGTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstantRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"string",
        		lv_string_2_0, 
        		"STRING");
	    }

)
)))
;





// Entry rule entryRuleVariable
entryRuleVariable returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableRule()); } 
	 iv_ruleVariable=ruleVariable 
	 { $current=$iv_ruleVariable.current.getText(); }  
	 EOF 
;

// Rule Variable
ruleVariable returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='$' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVariableAccess().getDollarSignKeyword_0()); 
    }
    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getVariableAccess().getIDTerminalRuleCall_1()); 
    }
)
    ;





RULE_NUMBER : ('0'..'9')* ('.' ('0'..'9')+)?;

RULE_INT : 'this one has been deactivated';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


