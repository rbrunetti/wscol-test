/*
* generated by Xtext
*/
package org.xtext.example.xpt.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class XptGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDeclarationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDeclarationsDeclarationParserRuleCall_0_0 = (RuleCall)cDeclarationsAssignment_0.eContents().get(0);
		private final Assignment cAssertionSetAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAssertionSetAssertionOrParserRuleCall_1_0 = (RuleCall)cAssertionSetAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Model:
		//	declarations+=Declaration* assertionSet=AssertionOr ";";
		public ParserRule getRule() { return rule; }

		//declarations+=Declaration* assertionSet=AssertionOr ";"
		public Group getGroup() { return cGroup; }

		//declarations+=Declaration*
		public Assignment getDeclarationsAssignment_0() { return cDeclarationsAssignment_0; }

		//Declaration
		public RuleCall getDeclarationsDeclarationParserRuleCall_0_0() { return cDeclarationsDeclarationParserRuleCall_0_0; }

		//assertionSet=AssertionOr
		public Assignment getAssertionSetAssignment_1() { return cAssertionSetAssignment_1; }

		//AssertionOr
		public RuleCall getAssertionSetAssertionOrParserRuleCall_1_0() { return cAssertionSetAssertionOrParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class DeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVarAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVarVariableParserRuleCall_1_0 = (RuleCall)cVarAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAssertAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cAssertAlternatives_3_0 = (Alternatives)cAssertAssignment_3.eContents().get(0);
		private final RuleCall cAssertAssertionParserRuleCall_3_0_0 = (RuleCall)cAssertAlternatives_3_0.eContents().get(0);
		private final RuleCall cAssertAssertionQuantifiedBooleanParserRuleCall_3_0_1 = (RuleCall)cAssertAlternatives_3_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Declaration:
		//	"let" var=Variable "=" assert=(Assertion | AssertionQuantifiedBoolean) ";";
		public ParserRule getRule() { return rule; }

		//"let" var=Variable "=" assert=(Assertion | AssertionQuantifiedBoolean) ";"
		public Group getGroup() { return cGroup; }

		//"let"
		public Keyword getLetKeyword_0() { return cLetKeyword_0; }

		//var=Variable
		public Assignment getVarAssignment_1() { return cVarAssignment_1; }

		//Variable
		public RuleCall getVarVariableParserRuleCall_1_0() { return cVarVariableParserRuleCall_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//assert=(Assertion | AssertionQuantifiedBoolean)
		public Assignment getAssertAssignment_3() { return cAssertAssignment_3; }

		//Assertion | AssertionQuantifiedBoolean
		public Alternatives getAssertAlternatives_3_0() { return cAssertAlternatives_3_0; }

		//Assertion
		public RuleCall getAssertAssertionParserRuleCall_3_0_0() { return cAssertAssertionParserRuleCall_3_0_0; }

		//AssertionQuantifiedBoolean
		public RuleCall getAssertAssertionQuantifiedBooleanParserRuleCall_3_0_1() { return cAssertAssertionQuantifiedBooleanParserRuleCall_3_0_1; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class AssertionOrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AssertionOr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAssertionAndParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAssertionOrLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cVerticalLineVerticalLineKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAssertionAndParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AssertionOr returns Assertions:
		//	AssertionAnd ({AssertionOr.left=current} "||" right=AssertionAnd)*;
		public ParserRule getRule() { return rule; }

		//AssertionAnd ({AssertionOr.left=current} "||" right=AssertionAnd)*
		public Group getGroup() { return cGroup; }

		//AssertionAnd
		public RuleCall getAssertionAndParserRuleCall_0() { return cAssertionAndParserRuleCall_0; }

		//({AssertionOr.left=current} "||" right=AssertionAnd)*
		public Group getGroup_1() { return cGroup_1; }

		//{AssertionOr.left=current}
		public Action getAssertionOrLeftAction_1_0() { return cAssertionOrLeftAction_1_0; }

		//"||"
		public Keyword getVerticalLineVerticalLineKeyword_1_1() { return cVerticalLineVerticalLineKeyword_1_1; }

		//right=AssertionAnd
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//AssertionAnd
		public RuleCall getRightAssertionAndParserRuleCall_1_2_0() { return cRightAssertionAndParserRuleCall_1_2_0; }
	}

	public class AssertionAndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AssertionAnd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cHighProrityAssertionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAssertionAndLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAmpersandAmpersandKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightHighProrityAssertionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AssertionAnd returns Assertions:
		//	HighProrityAssertion ({AssertionAnd.left=current} "&&" right=HighProrityAssertion)*;
		public ParserRule getRule() { return rule; }

		//HighProrityAssertion ({AssertionAnd.left=current} "&&" right=HighProrityAssertion)*
		public Group getGroup() { return cGroup; }

		//HighProrityAssertion
		public RuleCall getHighProrityAssertionParserRuleCall_0() { return cHighProrityAssertionParserRuleCall_0; }

		//({AssertionAnd.left=current} "&&" right=HighProrityAssertion)*
		public Group getGroup_1() { return cGroup_1; }

		//{AssertionAnd.left=current}
		public Action getAssertionAndLeftAction_1_0() { return cAssertionAndLeftAction_1_0; }

		//"&&"
		public Keyword getAmpersandAmpersandKeyword_1_1() { return cAmpersandAmpersandKeyword_1_1; }

		//right=HighProrityAssertion
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//HighProrityAssertion
		public RuleCall getRightHighProrityAssertionParserRuleCall_1_2_0() { return cRightHighProrityAssertionParserRuleCall_1_2_0; }
	}

	public class HighProrityAssertionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HighProrityAssertion");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAssertionNotParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAssertionBracedParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAssertionFormParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//HighProrityAssertion returns Assertions:
		//	AssertionNot | AssertionBraced | AssertionForm;
		public ParserRule getRule() { return rule; }

		//AssertionNot | AssertionBraced | AssertionForm
		public Alternatives getAlternatives() { return cAlternatives; }

		//AssertionNot
		public RuleCall getAssertionNotParserRuleCall_0() { return cAssertionNotParserRuleCall_0; }

		//AssertionBraced
		public RuleCall getAssertionBracedParserRuleCall_1() { return cAssertionBracedParserRuleCall_1; }

		//AssertionForm
		public RuleCall getAssertionFormParserRuleCall_2() { return cAssertionFormParserRuleCall_2; }
	}

	public class AssertionBracedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AssertionBraced");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cInnerFormulaAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInnerFormulaAssertionOrParserRuleCall_1_0 = (RuleCall)cInnerFormulaAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//AssertionBraced:
		//	"(" innerFormula=AssertionOr ")";
		public ParserRule getRule() { return rule; }

		//"(" innerFormula=AssertionOr ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//innerFormula=AssertionOr
		public Assignment getInnerFormulaAssignment_1() { return cInnerFormulaAssignment_1; }

		//AssertionOr
		public RuleCall getInnerFormulaAssertionOrParserRuleCall_1_0() { return cInnerFormulaAssertionOrParserRuleCall_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class AssertionNotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AssertionNot");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cInnerFormulaAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInnerFormulaAssertionOrParserRuleCall_2_0 = (RuleCall)cInnerFormulaAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//AssertionNot:
		//	"!" "(" innerFormula=AssertionOr ")";
		public ParserRule getRule() { return rule; }

		//"!" "(" innerFormula=AssertionOr ")"
		public Group getGroup() { return cGroup; }

		//"!"
		public Keyword getExclamationMarkKeyword_0() { return cExclamationMarkKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//innerFormula=AssertionOr
		public Assignment getInnerFormulaAssignment_2() { return cInnerFormulaAssignment_2; }

		//AssertionOr
		public RuleCall getInnerFormulaAssertionOrParserRuleCall_2_0() { return cInnerFormulaAssertionOrParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class AssertionFormElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AssertionForm");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cLeftAssertAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cLeftAssertAssertionParserRuleCall_0_0_0 = (RuleCall)cLeftAssertAssignment_0_0.eContents().get(0);
		private final Assignment cOpAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cOpRopParserRuleCall_0_1_0 = (RuleCall)cOpAssignment_0_1.eContents().get(0);
		private final Assignment cRightAssertAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cRightAssertAssertionParserRuleCall_0_2_0 = (RuleCall)cRightAssertAssignment_0_2.eContents().get(0);
		private final Assignment cLeftAssertAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cLeftAssertAssertionQuantifiedBooleanParserRuleCall_1_0 = (RuleCall)cLeftAssertAssignment_1.eContents().get(0);
		
		//AssertionForm:
		//	leftAssert=Assertion op=Rop rightAssert=Assertion | leftAssert=AssertionQuantifiedBoolean;
		public ParserRule getRule() { return rule; }

		//leftAssert=Assertion op=Rop rightAssert=Assertion | leftAssert=AssertionQuantifiedBoolean
		public Alternatives getAlternatives() { return cAlternatives; }

		//leftAssert=Assertion op=Rop rightAssert=Assertion
		public Group getGroup_0() { return cGroup_0; }

		//leftAssert=Assertion
		public Assignment getLeftAssertAssignment_0_0() { return cLeftAssertAssignment_0_0; }

		//Assertion
		public RuleCall getLeftAssertAssertionParserRuleCall_0_0_0() { return cLeftAssertAssertionParserRuleCall_0_0_0; }

		//op=Rop
		public Assignment getOpAssignment_0_1() { return cOpAssignment_0_1; }

		//Rop
		public RuleCall getOpRopParserRuleCall_0_1_0() { return cOpRopParserRuleCall_0_1_0; }

		//rightAssert=Assertion
		public Assignment getRightAssertAssignment_0_2() { return cRightAssertAssignment_0_2; }

		//Assertion
		public RuleCall getRightAssertAssertionParserRuleCall_0_2_0() { return cRightAssertAssertionParserRuleCall_0_2_0; }

		//leftAssert=AssertionQuantifiedBoolean
		public Assignment getLeftAssertAssignment_1() { return cLeftAssertAssignment_1; }

		//AssertionQuantifiedBoolean
		public RuleCall getLeftAssertAssertionQuantifiedBooleanParserRuleCall_1_0() { return cLeftAssertAssertionQuantifiedBooleanParserRuleCall_1_0; }
	}

	public class AssertionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Assertion");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cQueryAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cQueryQueryParserRuleCall_0_0_0 = (RuleCall)cQueryAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cFullStopKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cFunctionAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cFunctionFunctionParserRuleCall_0_1_1_0 = (RuleCall)cFunctionAssignment_0_1_1.eContents().get(0);
		private final RuleCall cAssertionQuantifiedNumericParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Assignment cConstantAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cConstantConstantParserRuleCall_2_0 = (RuleCall)cConstantAssignment_2.eContents().get(0);
		private final Assignment cBooleanAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cBooleanBOOLEANTerminalRuleCall_3_0 = (RuleCall)cBooleanAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cLeftSquareBracketKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cValuesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cValuesValuesParserRuleCall_4_1_0 = (RuleCall)cValuesAssignment_4_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		
		//Assertion:
		//	query=Query ("." function=Function)? | AssertionQuantifiedNumeric | constant=Constant | boolean=BOOLEAN | "["
		//	values=Values "]";
		public ParserRule getRule() { return rule; }

		//query=Query ("." function=Function)? | AssertionQuantifiedNumeric | constant=Constant | boolean=BOOLEAN | "["
		//values=Values "]"
		public Alternatives getAlternatives() { return cAlternatives; }

		//query=Query ("." function=Function)?
		public Group getGroup_0() { return cGroup_0; }

		//query=Query
		public Assignment getQueryAssignment_0_0() { return cQueryAssignment_0_0; }

		//Query
		public RuleCall getQueryQueryParserRuleCall_0_0_0() { return cQueryQueryParserRuleCall_0_0_0; }

		//("." function=Function)?
		public Group getGroup_0_1() { return cGroup_0_1; }

		//"."
		public Keyword getFullStopKeyword_0_1_0() { return cFullStopKeyword_0_1_0; }

		//function=Function
		public Assignment getFunctionAssignment_0_1_1() { return cFunctionAssignment_0_1_1; }

		//Function
		public RuleCall getFunctionFunctionParserRuleCall_0_1_1_0() { return cFunctionFunctionParserRuleCall_0_1_1_0; }

		//AssertionQuantifiedNumeric
		public RuleCall getAssertionQuantifiedNumericParserRuleCall_1() { return cAssertionQuantifiedNumericParserRuleCall_1; }

		//constant=Constant
		public Assignment getConstantAssignment_2() { return cConstantAssignment_2; }

		//Constant
		public RuleCall getConstantConstantParserRuleCall_2_0() { return cConstantConstantParserRuleCall_2_0; }

		//boolean=BOOLEAN
		public Assignment getBooleanAssignment_3() { return cBooleanAssignment_3; }

		//BOOLEAN
		public RuleCall getBooleanBOOLEANTerminalRuleCall_3_0() { return cBooleanBOOLEANTerminalRuleCall_3_0; }

		//"[" values=Values "]"
		public Group getGroup_4() { return cGroup_4; }

		//"["
		public Keyword getLeftSquareBracketKeyword_4_0() { return cLeftSquareBracketKeyword_4_0; }

		//values=Values
		public Assignment getValuesAssignment_4_1() { return cValuesAssignment_4_1; }

		//Values
		public RuleCall getValuesValuesParserRuleCall_4_1_0() { return cValuesValuesParserRuleCall_4_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4_2() { return cRightSquareBracketKeyword_4_2; }
	}

	public class AssertionQuantifiedBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AssertionQuantifiedBoolean");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cQuantifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cQuantifierBoolQuantifierParserRuleCall_0_0 = (RuleCall)cQuantifierAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAliasAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAliasVariableParserRuleCall_2_0 = (RuleCall)cAliasAssignment_2.eContents().get(0);
		private final Keyword cInKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cVarAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cVarVariableParserRuleCall_4_0 = (RuleCall)cVarAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cConditionsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cConditionsAssertionOrParserRuleCall_6_0 = (RuleCall)cConditionsAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		////var è solo di tipo Variable, ok?
		//AssertionQuantifiedBoolean returns AssertionQuantified:
		//	quantifier=BoolQuantifier "(" alias=Variable "in" var=Variable "," conditions=AssertionOr ")";
		public ParserRule getRule() { return rule; }

		//quantifier=BoolQuantifier "(" alias=Variable "in" var=Variable "," conditions=AssertionOr ")"
		public Group getGroup() { return cGroup; }

		//quantifier=BoolQuantifier
		public Assignment getQuantifierAssignment_0() { return cQuantifierAssignment_0; }

		//BoolQuantifier
		public RuleCall getQuantifierBoolQuantifierParserRuleCall_0_0() { return cQuantifierBoolQuantifierParserRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//alias=Variable
		public Assignment getAliasAssignment_2() { return cAliasAssignment_2; }

		//Variable
		public RuleCall getAliasVariableParserRuleCall_2_0() { return cAliasVariableParserRuleCall_2_0; }

		//"in"
		public Keyword getInKeyword_3() { return cInKeyword_3; }

		//var=Variable
		public Assignment getVarAssignment_4() { return cVarAssignment_4; }

		//Variable
		public RuleCall getVarVariableParserRuleCall_4_0() { return cVarVariableParserRuleCall_4_0; }

		//","
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }

		//conditions=AssertionOr
		public Assignment getConditionsAssignment_6() { return cConditionsAssignment_6; }

		//AssertionOr
		public RuleCall getConditionsAssertionOrParserRuleCall_6_0() { return cConditionsAssertionOrParserRuleCall_6_0; }

		//")"
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}

	public class AssertionQuantifiedNumericElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AssertionQuantifiedNumeric");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cQuantifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cQuantifierNumbQuantifierParserRuleCall_0_0 = (RuleCall)cQuantifierAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAliasAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAliasVariableParserRuleCall_2_0 = (RuleCall)cAliasAssignment_2.eContents().get(0);
		private final Keyword cInKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cVarAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cVarVariableParserRuleCall_4_0 = (RuleCall)cVarAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cConditionsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cConditionsAssertionOrParserRuleCall_6_0 = (RuleCall)cConditionsAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		////var è solo di tipo Variable, ok?
		//AssertionQuantifiedNumeric returns AssertionQuantified:
		//	quantifier=NumbQuantifier "(" alias=Variable "in" var=Variable "," conditions=AssertionOr ")";
		public ParserRule getRule() { return rule; }

		//quantifier=NumbQuantifier "(" alias=Variable "in" var=Variable "," conditions=AssertionOr ")"
		public Group getGroup() { return cGroup; }

		//quantifier=NumbQuantifier
		public Assignment getQuantifierAssignment_0() { return cQuantifierAssignment_0; }

		//NumbQuantifier
		public RuleCall getQuantifierNumbQuantifierParserRuleCall_0_0() { return cQuantifierNumbQuantifierParserRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//alias=Variable
		public Assignment getAliasAssignment_2() { return cAliasAssignment_2; }

		//Variable
		public RuleCall getAliasVariableParserRuleCall_2_0() { return cAliasVariableParserRuleCall_2_0; }

		//"in"
		public Keyword getInKeyword_3() { return cInKeyword_3; }

		//var=Variable
		public Assignment getVarAssignment_4() { return cVarAssignment_4; }

		//Variable
		public RuleCall getVarVariableParserRuleCall_4_0() { return cVarVariableParserRuleCall_4_0; }

		//","
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }

		//conditions=AssertionOr
		public Assignment getConditionsAssignment_6() { return cConditionsAssignment_6; }

		//AssertionOr
		public RuleCall getConditionsAssertionOrParserRuleCall_6_0() { return cConditionsAssertionOrParserRuleCall_6_0; }

		//")"
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}

	public class QueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Query");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cStepsAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cStepsStepParserRuleCall_0_1_0 = (RuleCall)cStepsAssignment_0_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cStepsAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cStepsStepParserRuleCall_1_0 = (RuleCall)cStepsAssignment_1.eContents().get(0);
		
		//Query:
		//	"(" steps+=Step+ ")" | steps+=Step+;
		public ParserRule getRule() { return rule; }

		//"(" steps+=Step+ ")" | steps+=Step+
		public Alternatives getAlternatives() { return cAlternatives; }

		//"(" steps+=Step+ ")"
		public Group getGroup_0() { return cGroup_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }

		//steps+=Step+
		public Assignment getStepsAssignment_0_1() { return cStepsAssignment_0_1; }

		//Step
		public RuleCall getStepsStepParserRuleCall_0_1_0() { return cStepsStepParserRuleCall_0_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }

		//steps+=Step+
		public Assignment getStepsAssignment_1() { return cStepsAssignment_1; }

		//Step
		public RuleCall getStepsStepParserRuleCall_1_0() { return cStepsStepParserRuleCall_1_0; }
	}

	public class StepElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Step");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cSolidusKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Assignment cAttributeAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final RuleCall cAttributeAttributeParserRuleCall_0_2_1_0 = (RuleCall)cAttributeAssignment_0_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_2_2 = (Keyword)cGroup_0_2.eContents().get(2);
		private final Assignment cPlaceholderAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cPlaceholderVariableParserRuleCall_1_0 = (RuleCall)cPlaceholderAssignment_1.eContents().get(0);
		
		//Step:
		//	"/" name=ID ("[" attribute=Attribute "]")? | placeholder=Variable;
		public ParserRule getRule() { return rule; }

		//"/" name=ID ("[" attribute=Attribute "]")? | placeholder=Variable
		public Alternatives getAlternatives() { return cAlternatives; }

		//"/" name=ID ("[" attribute=Attribute "]")?
		public Group getGroup_0() { return cGroup_0; }

		//"/"
		public Keyword getSolidusKeyword_0_0() { return cSolidusKeyword_0_0; }

		//name=ID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_0() { return cNameIDTerminalRuleCall_0_1_0; }

		//("[" attribute=Attribute "]")?
		public Group getGroup_0_2() { return cGroup_0_2; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0_2_0() { return cLeftSquareBracketKeyword_0_2_0; }

		//attribute=Attribute
		public Assignment getAttributeAssignment_0_2_1() { return cAttributeAssignment_0_2_1; }

		//Attribute
		public RuleCall getAttributeAttributeParserRuleCall_0_2_1_0() { return cAttributeAttributeParserRuleCall_0_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_0_2_2() { return cRightSquareBracketKeyword_0_2_2; }

		//placeholder=Variable
		public Assignment getPlaceholderAssignment_1() { return cPlaceholderAssignment_1; }

		//Variable
		public RuleCall getPlaceholderVariableParserRuleCall_1_0() { return cPlaceholderVariableParserRuleCall_1_0; }
	}

	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Attribute");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cPropertyAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cPropertyIDTerminalRuleCall_0_0_0 = (RuleCall)cPropertyAssignment_0_0.eContents().get(0);
		private final Alternatives cAlternatives_0_1 = (Alternatives)cGroup_0.eContents().get(1);
		private final Group cGroup_0_1_0 = (Group)cAlternatives_0_1.eContents().get(0);
		private final Assignment cOpAssignment_0_1_0_0 = (Assignment)cGroup_0_1_0.eContents().get(0);
		private final RuleCall cOpRopParserRuleCall_0_1_0_0_0 = (RuleCall)cOpAssignment_0_1_0_0.eContents().get(0);
		private final Assignment cNumberValueAssignment_0_1_0_1 = (Assignment)cGroup_0_1_0.eContents().get(1);
		private final RuleCall cNumberValueNUMBERTerminalRuleCall_0_1_0_1_0 = (RuleCall)cNumberValueAssignment_0_1_0_1.eContents().get(0);
		private final Group cGroup_0_1_1 = (Group)cAlternatives_0_1.eContents().get(1);
		private final Assignment cOpAssignment_0_1_1_0 = (Assignment)cGroup_0_1_1.eContents().get(0);
		private final RuleCall cOpStringRopParserRuleCall_0_1_1_0_0 = (RuleCall)cOpAssignment_0_1_1_0.eContents().get(0);
		private final Assignment cStrValueAssignment_0_1_1_1 = (Assignment)cGroup_0_1_1.eContents().get(1);
		private final RuleCall cStrValueSTRINGTerminalRuleCall_0_1_1_1_0 = (RuleCall)cStrValueAssignment_0_1_1_1.eContents().get(0);
		private final Assignment cNumberAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cNumberNUMBERTerminalRuleCall_1_0 = (RuleCall)cNumberAssignment_1.eContents().get(0);
		
		//Attribute:
		//	property=ID (op=Rop numberValue=NUMBER | op=StringRop strValue=STRING) | number=NUMBER;
		public ParserRule getRule() { return rule; }

		//property=ID (op=Rop numberValue=NUMBER | op=StringRop strValue=STRING) | number=NUMBER
		public Alternatives getAlternatives() { return cAlternatives; }

		//property=ID (op=Rop numberValue=NUMBER | op=StringRop strValue=STRING)
		public Group getGroup_0() { return cGroup_0; }

		//property=ID
		public Assignment getPropertyAssignment_0_0() { return cPropertyAssignment_0_0; }

		//ID
		public RuleCall getPropertyIDTerminalRuleCall_0_0_0() { return cPropertyIDTerminalRuleCall_0_0_0; }

		//op=Rop numberValue=NUMBER | op=StringRop strValue=STRING
		public Alternatives getAlternatives_0_1() { return cAlternatives_0_1; }

		//op=Rop numberValue=NUMBER
		public Group getGroup_0_1_0() { return cGroup_0_1_0; }

		//op=Rop
		public Assignment getOpAssignment_0_1_0_0() { return cOpAssignment_0_1_0_0; }

		//Rop
		public RuleCall getOpRopParserRuleCall_0_1_0_0_0() { return cOpRopParserRuleCall_0_1_0_0_0; }

		//numberValue=NUMBER
		public Assignment getNumberValueAssignment_0_1_0_1() { return cNumberValueAssignment_0_1_0_1; }

		//NUMBER
		public RuleCall getNumberValueNUMBERTerminalRuleCall_0_1_0_1_0() { return cNumberValueNUMBERTerminalRuleCall_0_1_0_1_0; }

		//op=StringRop strValue=STRING
		public Group getGroup_0_1_1() { return cGroup_0_1_1; }

		//op=StringRop
		public Assignment getOpAssignment_0_1_1_0() { return cOpAssignment_0_1_1_0; }

		//StringRop
		public RuleCall getOpStringRopParserRuleCall_0_1_1_0_0() { return cOpStringRopParserRuleCall_0_1_1_0_0; }

		//strValue=STRING
		public Assignment getStrValueAssignment_0_1_1_1() { return cStrValueAssignment_0_1_1_1; }

		//STRING
		public RuleCall getStrValueSTRINGTerminalRuleCall_0_1_1_1_0() { return cStrValueSTRINGTerminalRuleCall_0_1_1_1_0; }

		//number=NUMBER
		public Assignment getNumberAssignment_1() { return cNumberAssignment_1; }

		//NUMBER
		public RuleCall getNumberNUMBERTerminalRuleCall_1_0() { return cNumberNUMBERTerminalRuleCall_1_0; }
	}

	public class StringRopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringRop");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//StringRop:
		//	"=" | "!=";
		public ParserRule getRule() { return rule; }

		//"=" | "!="
		public Alternatives getAlternatives() { return cAlternatives; }

		//"="
		public Keyword getEqualsSignKeyword_0() { return cEqualsSignKeyword_0; }

		//"!="
		public Keyword getExclamationMarkEqualsSignKeyword_1() { return cExclamationMarkEqualsSignKeyword_1; }
	}

	public class RopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Rop");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStringRopParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cLessThanSignEqualsSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cGreaterThanSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cGreaterThanSignEqualsSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//Rop:
		//	StringRop | "<" | "<=" | ">" | ">=";
		public ParserRule getRule() { return rule; }

		//StringRop | "<" | "<=" | ">" | ">="
		public Alternatives getAlternatives() { return cAlternatives; }

		//StringRop
		public RuleCall getStringRopParserRuleCall_0() { return cStringRopParserRuleCall_0; }

		//"<"
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }

		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_2() { return cLessThanSignEqualsSignKeyword_2; }

		//">"
		public Keyword getGreaterThanSignKeyword_3() { return cGreaterThanSignKeyword_3; }

		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_4() { return cGreaterThanSignEqualsSignKeyword_4; }
	}

	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cParamsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParamsValuesParserRuleCall_2_0 = (RuleCall)cParamsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Function:
		//	name=ID "(" params=Values? ")";
		public ParserRule getRule() { return rule; }

		//name=ID "(" params=Values? ")"
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//params=Values?
		public Assignment getParamsAssignment_2() { return cParamsAssignment_2; }

		//Values
		public RuleCall getParamsValuesParserRuleCall_2_0() { return cParamsValuesParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class BoolQuantifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BoolQuantifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cForallKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cExistsKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//BoolQuantifier:
		//	"forall" | "exists";
		public ParserRule getRule() { return rule; }

		//"forall" | "exists"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"forall"
		public Keyword getForallKeyword_0() { return cForallKeyword_0; }

		//"exists"
		public Keyword getExistsKeyword_1() { return cExistsKeyword_1; }
	}

	public class NumbQuantifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumbQuantifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cNumOfKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSumKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cAvgKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cMinKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cMaxKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cProductKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//NumbQuantifier:
		//	"numOf" | "sum" | "avg" | "min" | "max" | "product";
		public ParserRule getRule() { return rule; }

		//"numOf" | "sum" | "avg" | "min" | "max" | "product"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"numOf"
		public Keyword getNumOfKeyword_0() { return cNumOfKeyword_0; }

		//"sum"
		public Keyword getSumKeyword_1() { return cSumKeyword_1; }

		//"avg"
		public Keyword getAvgKeyword_2() { return cAvgKeyword_2; }

		//"min"
		public Keyword getMinKeyword_3() { return cMinKeyword_3; }

		//"max"
		public Keyword getMaxKeyword_4() { return cMaxKeyword_4; }

		//"product"
		public Keyword getProductKeyword_5() { return cProductKeyword_5; }
	}

	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Variable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDollarSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cBoolQuantifierParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final RuleCall cNumbQuantifierParserRuleCall_1_2 = (RuleCall)cAlternatives_1.eContents().get(2);
		
		//Variable:
		//	"$" (ID | BoolQuantifier | NumbQuantifier);
		public ParserRule getRule() { return rule; }

		//"$" (ID | BoolQuantifier | NumbQuantifier)
		public Group getGroup() { return cGroup; }

		//"$"
		public Keyword getDollarSignKeyword_0() { return cDollarSignKeyword_0; }

		//ID | BoolQuantifier | NumbQuantifier
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_0() { return cIDTerminalRuleCall_1_0; }

		//BoolQuantifier
		public RuleCall getBoolQuantifierParserRuleCall_1_1() { return cBoolQuantifierParserRuleCall_1_1; }

		//NumbQuantifier
		public RuleCall getNumbQuantifierParserRuleCall_1_2() { return cNumbQuantifierParserRuleCall_1_2; }
	}

	public class ValuesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Values");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueConstantParserRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueConstantParserRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		
		//Values:
		//	value+=Constant ("," value+=Constant)*;
		public ParserRule getRule() { return rule; }

		//value+=Constant ("," value+=Constant)*
		public Group getGroup() { return cGroup; }

		//value+=Constant
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }

		//Constant
		public RuleCall getValueConstantParserRuleCall_0_0() { return cValueConstantParserRuleCall_0_0; }

		//("," value+=Constant)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//value+=Constant
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }

		//Constant
		public RuleCall getValueConstantParserRuleCall_1_1_0() { return cValueConstantParserRuleCall_1_1_0; }
	}

	public class ConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Constant");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNumberAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cNumberNUMBERTerminalRuleCall_0_0 = (RuleCall)cNumberAssignment_0.eContents().get(0);
		private final Assignment cStringAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cStringSTRINGTerminalRuleCall_1_0 = (RuleCall)cStringAssignment_1.eContents().get(0);
		
		//Constant:
		//	number=NUMBER | string=STRING;
		public ParserRule getRule() { return rule; }

		//number=NUMBER | string=STRING
		public Alternatives getAlternatives() { return cAlternatives; }

		//number=NUMBER
		public Assignment getNumberAssignment_0() { return cNumberAssignment_0; }

		//NUMBER
		public RuleCall getNumberNUMBERTerminalRuleCall_0_0() { return cNumberNUMBERTerminalRuleCall_0_0; }

		//string=STRING
		public Assignment getStringAssignment_1() { return cStringAssignment_1; }

		//STRING
		public RuleCall getStringSTRINGTerminalRuleCall_1_0() { return cStringSTRINGTerminalRuleCall_1_0; }
	}
	
	
	private ModelElements pModel;
	private DeclarationElements pDeclaration;
	private AssertionOrElements pAssertionOr;
	private AssertionAndElements pAssertionAnd;
	private HighProrityAssertionElements pHighProrityAssertion;
	private AssertionBracedElements pAssertionBraced;
	private AssertionNotElements pAssertionNot;
	private AssertionFormElements pAssertionForm;
	private AssertionElements pAssertion;
	private AssertionQuantifiedBooleanElements pAssertionQuantifiedBoolean;
	private AssertionQuantifiedNumericElements pAssertionQuantifiedNumeric;
	private QueryElements pQuery;
	private StepElements pStep;
	private AttributeElements pAttribute;
	private StringRopElements pStringRop;
	private RopElements pRop;
	private FunctionElements pFunction;
	private BoolQuantifierElements pBoolQuantifier;
	private NumbQuantifierElements pNumbQuantifier;
	private VariableElements pVariable;
	private ValuesElements pValues;
	private ConstantElements pConstant;
	private TerminalRule tBOOLEAN;
	private TerminalRule tNUMBER;
	private TerminalRule tINT;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public XptGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.xpt.Xpt".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	declarations+=Declaration* assertionSet=AssertionOr ";";
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Declaration:
	//	"let" var=Variable "=" assert=(Assertion | AssertionQuantifiedBoolean) ";";
	public DeclarationElements getDeclarationAccess() {
		return (pDeclaration != null) ? pDeclaration : (pDeclaration = new DeclarationElements());
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}

	//AssertionOr returns Assertions:
	//	AssertionAnd ({AssertionOr.left=current} "||" right=AssertionAnd)*;
	public AssertionOrElements getAssertionOrAccess() {
		return (pAssertionOr != null) ? pAssertionOr : (pAssertionOr = new AssertionOrElements());
	}
	
	public ParserRule getAssertionOrRule() {
		return getAssertionOrAccess().getRule();
	}

	//AssertionAnd returns Assertions:
	//	HighProrityAssertion ({AssertionAnd.left=current} "&&" right=HighProrityAssertion)*;
	public AssertionAndElements getAssertionAndAccess() {
		return (pAssertionAnd != null) ? pAssertionAnd : (pAssertionAnd = new AssertionAndElements());
	}
	
	public ParserRule getAssertionAndRule() {
		return getAssertionAndAccess().getRule();
	}

	//HighProrityAssertion returns Assertions:
	//	AssertionNot | AssertionBraced | AssertionForm;
	public HighProrityAssertionElements getHighProrityAssertionAccess() {
		return (pHighProrityAssertion != null) ? pHighProrityAssertion : (pHighProrityAssertion = new HighProrityAssertionElements());
	}
	
	public ParserRule getHighProrityAssertionRule() {
		return getHighProrityAssertionAccess().getRule();
	}

	//AssertionBraced:
	//	"(" innerFormula=AssertionOr ")";
	public AssertionBracedElements getAssertionBracedAccess() {
		return (pAssertionBraced != null) ? pAssertionBraced : (pAssertionBraced = new AssertionBracedElements());
	}
	
	public ParserRule getAssertionBracedRule() {
		return getAssertionBracedAccess().getRule();
	}

	//AssertionNot:
	//	"!" "(" innerFormula=AssertionOr ")";
	public AssertionNotElements getAssertionNotAccess() {
		return (pAssertionNot != null) ? pAssertionNot : (pAssertionNot = new AssertionNotElements());
	}
	
	public ParserRule getAssertionNotRule() {
		return getAssertionNotAccess().getRule();
	}

	//AssertionForm:
	//	leftAssert=Assertion op=Rop rightAssert=Assertion | leftAssert=AssertionQuantifiedBoolean;
	public AssertionFormElements getAssertionFormAccess() {
		return (pAssertionForm != null) ? pAssertionForm : (pAssertionForm = new AssertionFormElements());
	}
	
	public ParserRule getAssertionFormRule() {
		return getAssertionFormAccess().getRule();
	}

	//Assertion:
	//	query=Query ("." function=Function)? | AssertionQuantifiedNumeric | constant=Constant | boolean=BOOLEAN | "["
	//	values=Values "]";
	public AssertionElements getAssertionAccess() {
		return (pAssertion != null) ? pAssertion : (pAssertion = new AssertionElements());
	}
	
	public ParserRule getAssertionRule() {
		return getAssertionAccess().getRule();
	}

	////var è solo di tipo Variable, ok?
	//AssertionQuantifiedBoolean returns AssertionQuantified:
	//	quantifier=BoolQuantifier "(" alias=Variable "in" var=Variable "," conditions=AssertionOr ")";
	public AssertionQuantifiedBooleanElements getAssertionQuantifiedBooleanAccess() {
		return (pAssertionQuantifiedBoolean != null) ? pAssertionQuantifiedBoolean : (pAssertionQuantifiedBoolean = new AssertionQuantifiedBooleanElements());
	}
	
	public ParserRule getAssertionQuantifiedBooleanRule() {
		return getAssertionQuantifiedBooleanAccess().getRule();
	}

	////var è solo di tipo Variable, ok?
	//AssertionQuantifiedNumeric returns AssertionQuantified:
	//	quantifier=NumbQuantifier "(" alias=Variable "in" var=Variable "," conditions=AssertionOr ")";
	public AssertionQuantifiedNumericElements getAssertionQuantifiedNumericAccess() {
		return (pAssertionQuantifiedNumeric != null) ? pAssertionQuantifiedNumeric : (pAssertionQuantifiedNumeric = new AssertionQuantifiedNumericElements());
	}
	
	public ParserRule getAssertionQuantifiedNumericRule() {
		return getAssertionQuantifiedNumericAccess().getRule();
	}

	//Query:
	//	"(" steps+=Step+ ")" | steps+=Step+;
	public QueryElements getQueryAccess() {
		return (pQuery != null) ? pQuery : (pQuery = new QueryElements());
	}
	
	public ParserRule getQueryRule() {
		return getQueryAccess().getRule();
	}

	//Step:
	//	"/" name=ID ("[" attribute=Attribute "]")? | placeholder=Variable;
	public StepElements getStepAccess() {
		return (pStep != null) ? pStep : (pStep = new StepElements());
	}
	
	public ParserRule getStepRule() {
		return getStepAccess().getRule();
	}

	//Attribute:
	//	property=ID (op=Rop numberValue=NUMBER | op=StringRop strValue=STRING) | number=NUMBER;
	public AttributeElements getAttributeAccess() {
		return (pAttribute != null) ? pAttribute : (pAttribute = new AttributeElements());
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}

	//StringRop:
	//	"=" | "!=";
	public StringRopElements getStringRopAccess() {
		return (pStringRop != null) ? pStringRop : (pStringRop = new StringRopElements());
	}
	
	public ParserRule getStringRopRule() {
		return getStringRopAccess().getRule();
	}

	//Rop:
	//	StringRop | "<" | "<=" | ">" | ">=";
	public RopElements getRopAccess() {
		return (pRop != null) ? pRop : (pRop = new RopElements());
	}
	
	public ParserRule getRopRule() {
		return getRopAccess().getRule();
	}

	//Function:
	//	name=ID "(" params=Values? ")";
	public FunctionElements getFunctionAccess() {
		return (pFunction != null) ? pFunction : (pFunction = new FunctionElements());
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}

	//BoolQuantifier:
	//	"forall" | "exists";
	public BoolQuantifierElements getBoolQuantifierAccess() {
		return (pBoolQuantifier != null) ? pBoolQuantifier : (pBoolQuantifier = new BoolQuantifierElements());
	}
	
	public ParserRule getBoolQuantifierRule() {
		return getBoolQuantifierAccess().getRule();
	}

	//NumbQuantifier:
	//	"numOf" | "sum" | "avg" | "min" | "max" | "product";
	public NumbQuantifierElements getNumbQuantifierAccess() {
		return (pNumbQuantifier != null) ? pNumbQuantifier : (pNumbQuantifier = new NumbQuantifierElements());
	}
	
	public ParserRule getNumbQuantifierRule() {
		return getNumbQuantifierAccess().getRule();
	}

	//Variable:
	//	"$" (ID | BoolQuantifier | NumbQuantifier);
	public VariableElements getVariableAccess() {
		return (pVariable != null) ? pVariable : (pVariable = new VariableElements());
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}

	//Values:
	//	value+=Constant ("," value+=Constant)*;
	public ValuesElements getValuesAccess() {
		return (pValues != null) ? pValues : (pValues = new ValuesElements());
	}
	
	public ParserRule getValuesRule() {
		return getValuesAccess().getRule();
	}

	//Constant:
	//	number=NUMBER | string=STRING;
	public ConstantElements getConstantAccess() {
		return (pConstant != null) ? pConstant : (pConstant = new ConstantElements());
	}
	
	public ParserRule getConstantRule() {
		return getConstantAccess().getRule();
	}

	//terminal BOOLEAN returns ecore::EBoolean:
	//	"true" | "false";
	public TerminalRule getBOOLEANRule() {
		return (tBOOLEAN != null) ? tBOOLEAN : (tBOOLEAN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BOOLEAN"));
	} 

	//terminal NUMBER returns ecore::EDouble:
	//	"-"? "0".."9"* ("." "0".."9"+)?;
	public TerminalRule getNUMBERRule() {
		return (tNUMBER != null) ? tNUMBER : (tNUMBER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NUMBER"));
	} 

	//// override della regola di default
	//terminal INT returns ecore::EInt:
	//	"this one has been deactivated";
	public TerminalRule getINTRule() {
		return (tINT != null) ? tINT : (tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT"));
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
